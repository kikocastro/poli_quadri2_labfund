; T3G14A02E03
; MEMCPY: Copia uma sequência de tamanho arbitrário de wordsda memória de uma
; posição em outra. Retorna 0000 em caso de sucesso e FFFF em caso de erro 
; (ex.: endereço de destino inválido).  Parâmetros: o número de words a ser
; copiado, o endereço da sequência de origem e o endereço da sequência de 
; destino.Retorno (acumulador): 0000 em caso de sucesso; FFFF caso contrário.
; Endereço de início do programa principal: 0000Endereço do número de words
; a ser copiado: 0002Endereço inicial da sequência de origem: 0004Endereço
; inicial da sequência de destino: 0006Endereço  reservado  para  sequências
; de  origem  e  destino:0008..0018		
				;						@ 			/0000
0000 001a		;						JP 			INI 

;ENTRADAS
0002 0000		;	SIZE 				K 			/0000		;Numero de words a ser copiado
0004 0008		;	ORIGIN				K 			/0008		;Endereço de origem da lista que sera copiada
0006 0012		;	DESTINATION			K 			/0012		;Endereço para onde vai a lista copiada

;Alocação de memória
;MEM				    $ 			/0009 		;Alocando 16 posições a partir de AUX
0008 0001		;	TEST_LIST			K			/0001		;0008
000a 0002		;						K			/0002	 	;000A
000c 0003		;						K			/0003		;000C
000e 0004		;						K			/0004		;000E
0010 ffff		;						K			/FFFF		;0010
0012 ffff		;						K			/FFFF		;0012
0014 ffff		;						K			/FFFF	 	;0014
0016 ffff		;						K			/FFFF	 	;0016
0018 ffff		;						K			/FFFF	 	;0018
001a 3002		;	INI					LV			SIZE
001c 9030		;						MM			MEMCPY_SIZE_PTR
001e 3004		;						LV			ORIGIN
0020 902c		;						MM			MEMCPY_ORIGIN_PTR
0022 3006		;						LV			DESTINATION
0024 902e		;						MM			MEMCPY_DESTINATION_PTR
0026 a048		;						SC 			MEMCPY
0028 c028		;	END					HM			END
;
; SUB-ROTINA MEMCPY
;VARIAVEIS
002a 0000		;	COUNT 					K 			/0000
002c 0000		;	MEMCPY_ORIGIN_PTR	 	K			/0000
002e 0000		;	MEMCPY_DESTINATION_PTR  K			/0000
0030 0000		;	MEMCPY_SIZE_PTR 		K			/0000
0032 0000		;	MEMCPY_ORIGIN		 	K			/0000
0034 0000		;	MEMCPY_DESTINATION		K			/0000
0036 0000		;	MEMCPY_SIZE				K			/0000

;CONSTANTES
0038 8000		;	LOAD				LD			/0000
003a 9000		;	WRITE				MM			/0000
003c 0002		;	INCREMENT 			K			/0002

003e 0001		;	CONST_1				K 			/0001
0040 ffff		;	CONST_FFFF			K 			/FFFF
0042 0000		;	CONST_0				K			/0000
0044 0008		;	RANGE_START			K			/0008 ; Inicio do intervalo determinado
0046 0018		;	RANGE_END			K			/0018 ; Fim do intervalo determinado
; Rotina
0048 0000		;	MEMCPY				K			/0000
					; Carrega valores de entrada
004a 802c		;		                LD 			MEMCPY_ORIGIN_PTR ; carrega o endereço
004c 4038		;		                + 			LOAD ; Soma load
004e 9050		;		                MM 			EXEC1 ; Armazena em EXEC1
0050 0000		;	EXEC1   			K 			/0000 ; Carrega valor do endereço
0052 9032		;						MM 			MEMCPY_ORIGIN ; Armazena
0054 802e		;		                LD 			MEMCPY_DESTINATION_PTR ; carrega o endereço
0056 4038		;		                + 			LOAD ; Soma load
0058 905a		;		                MM 			EXEC2 ; Armazena em EXEC2
005a 0000		;	EXEC2   			K 			/0000 ; Carrega valor do endereço
005c 9034		;						MM 			MEMCPY_DESTINATION ; Armazena
005e 8030		;		                LD 			MEMCPY_SIZE_PTR ; carrega o endereço
0060 4038		;		                + 			LOAD ; Soma load
0062 9064		;		                MM 			EXEC3 ; Armazena em EXEC3
0064 0000		;	EXEC3   			K 			/0000 ; Carrega valor do endereço
0066 9036		;						MM 			MEMCPY_SIZE ; Armazena
					; Tratamento de erros de Input
					; 1) Endereço inicial + o numero de palavras > endereço maximo
0068 8046		;						LD      	RANGE_END		; Carrega o endereço maximo de destino
006a 5036		;						-			MEMCPY_SIZE
006c 5036		;						-			MEMCPY_SIZE	; Subtrai numero de enderecos de words que serao copiadas (Duas vezes pois cada palavra ocupa 2 Bytes)
006e 5034		;						-			MEMCPY_DESTINATION 	; Subtrai o endereço inicial do destino
0070 20b4		;						JN			END_FAIL	; Caso o endereço inicial + o numero de palavras > endereço maximo, ERRO
					; 2) Endereço de destino esta antes do intervalo
0072 8034		;						LD 			MEMCPY_DESTINATION
0074 5044		;						-			RANGE_START		
0076 20b4		;						JN			END_FAIL	
					; 3) Origem esta antes do intervalo
0078 8032		;						LD 			MEMCPY_ORIGIN
007a 5044		;						-			RANGE_START
007c 20b4		;						JN			END_FAIL	 
					; 4) Origem esta a frente do intervalo
007e 8046		;						LD 			RANGE_END
0080 5032		;						-			MEMCPY_ORIGIN
0082 5036		;						-			MEMCPY_SIZE
0084 5036		;						-			MEMCPY_SIZE
0086 20b4		;						JN			END_FAIL 	
					; Comeco de MEMCPY
0088 8036		;	LOOP				LD			MEMCPY_SIZE	; Carrega o numero de words no acumulador
008a 502a		;						- 			COUNT 		; Subtrai o contador do acumulador
008c 10b0		;						JZ			END_SUCCESS	; Caso o contador seja igual ao numero de words, encerra

008e 8034		;						LD			MEMCPY_DESTINATION ; Carrega endereco de destino
0090 403a		;						+			WRITE		; Adiciona comando MM
0092 909a		;						MM 			EXEC		; Armazena em EXEC

0094 8032		;						LD			MEMCPY_ORIGIN	; Carrega endereço de origem
0096 90b8		;						MM 			TARGET_ADDRESS 
0098 a0ba		;						SC			LOAD_VALUE ; Carrega valor no endereco de origem

009a 0000		;	EXEC				K			/0000 ; Armazena o valor no endereco de destino
009c 8034		;						LD			MEMCPY_DESTINATION	; Carrega o endereço de destino
009e 403c		;						+			INCREMENT 	; Avança 2 posições na memoria
00a0 9034		;						MM 			MEMCPY_DESTINATION	; Atualiza MEMCPY_DESTINATION

00a2 8032		;						LD			MEMCPY_ORIGIN	; Carrega o endereço de origem
00a4 403c		;						+			INCREMENT 	; Avança 2 posições na memoria
00a6 9032		;						MM 			MEMCPY_ORIGIN	; Atualiza MEMCPY_ORIGIN

00a8 802a		;						LD 			COUNT 		; Carrega o contador no acumulador
00aa 403e		;						+			CONST_1 		; Soma 1
00ac 902a		;						MM 			COUNT 		; Atualiza CONT

00ae 0088		;						JP			LOOP

00b0 8042		;	END_SUCCESS			LD 			CONST_0 	; Se o programa finalizar com sucesso, coloca 0x0000 no acumulador
00b2 00b6		;						JP 			RETURN_MEMCPY 
00b4 8040		;	END_FAIL			LD 			CONST_FFFF ; Se o programa finalizar com falhas, coloca 0xFFFF no acumulador
					
00b6 b048		;	RETURN_MEMCPY		RS 			MEMCPY


;
; Subrotina para carregar um valor no endereço ADDRESS
;
; Variaveis
00b8 0000		;	TARGET_ADDRESS  K /0000 ; Endereço em que esta o valor desejado
;
00ba 0000		;	LOAD_VALUE      K /0000
00bc 80b8		;	                LD TARGET_ADDRESS ; carrega o endereço
00be 4038		;	                + LOAD ; Soma load
00c0 90c2		;	                MM EXEC_LOAD ; Armazena em EXEC_LOAD
00c2 0000		;	EXEC_LOAD       K /0000 ; Carrega valor do endereço
00c4 b0ba		;	                RS LOAD_VALUE ; END da sub rotina
