; Importa constantes
;
4000 0000 ; "LOAD<"		;	LOAD        <
4001 0000 ; "WRITE<"		;	WRITE       <
4002 0000 ; "SUBTRACT<"		;	SUBTRACT    <
4003 0000 ; "SUM<"		;	SUM         <
4004 0000 ; "DIVIDE<"		;	DIVIDE      <
4005 0000 ; "MULTIPLY<"		;	MULTIPLY    <
4006 0000 ; "GETDATA<"		;	GETDATA     <
4007 0000 ; "PUTDATA<"		;	PUTDATA     <

4008 0000 ; "CONST_0<"		;	CONST_0                 <
4009 0000 ; "CONST_1<"		;	CONST_1                 <
4010 0000 ; "CONST_2<"		;	CONST_2                 <
4011 0000 ; "CONST_7<"		;	CONST_7                 <
4012 0000 ; "CONST_9<"		;	CONST_9                 <
4013 0000 ; "CONST_A<"		;	CONST_A                 <
4014 0000 ; "CONST_10<"		;	CONST_10                <
4015 0000 ; "CONST_F<"		;	CONST_F                 <
4016 0000 ; "CONST_30<"		;	CONST_30                <
4017 0000 ; "CONST_3A<"		;	CONST_3A                <
4018 0000 ; "CONST_40<"		;	CONST_40                <
4019 0000 ; "CONST_47<"		;	CONST_47                <
4020 0000 ; "CONST_80<"		;	CONST_80                <
4021 0000 ; "CONST_FF<"		;	CONST_FF                <
4022 0000 ; "CONST_100<"		;	CONST_100               <
4023 0000 ; "CONST_300<"		;	CONST_300               <
4024 0000 ; "CONST_FFE<"		;	CONST_FFE               <
4025 0000 ; "CONST_1000<"		;	CONST_1000              <
4026 0000 ; "CONST_1001<"		;	CONST_1001              <
4027 0000 ; "CONST_8000<"		;	CONST_8000              <
4028 0000 ; "CONST_FFFC<"		;	CONST_FFFC              <
4029 0000 ; "CONST_FFFE<"		;	CONST_FFFE              <
4030 0000 ; "CONST_FFFF<"		;	CONST_FFFF              <

4031 0000 ; "MEM_START<"		;	MEM_START   <
4032 0000 ; "MEM_END<"		;	MEM_END     <
;
; Entradas e saidas
;
; Rotinas
;
2022 0000 ; "DUMPER>"		;	DUMPER      >
210c 0000 ; "LOADER>"		;	LOADER      >
21e6 0000 ; "CHTOI>"		;	CHTOI       >
;
; DUMPER
2000 0000 ; "DUMP_INI>"		;	DUMP_INI    >
2002 0000 ; "DUMP_TAM>"		;	DUMP_TAM    >
2004 0000 ; "DUMP_UL>"		;	DUMP_UL     >
2006 0000 ; "DUMP_BL>"		;	DUMP_BL     >
2008 0000 ; "DUMP_EXE>"		;	DUMP_EXE    >
;
; LOADER
200a 0000 ; "LOADER_UL>"		;	LOADER_UL   >
;
; CHTOI
200c 0000 ; "INPUT_1_PTR>"		;	INPUT_1_PTR >
200e 0000 ; "INPUT_2_PTR>"		;	INPUT_2_PTR >
;
				;	& /0000 ; Origem relocavel
; DUMPER
8000 0400		;	DUMP_INI		K	/0400	; Endere�o onde come�a o dump
8002 0032		;	DUMP_TAM	    K	/0032	; Numero total de palavras a serem "dumpadas"
8004 0000		;	DUMP_UL			K	/0000	; Unidade logica do disco a ser usado
8006 0010		;	DUMP_BL 		K	/0010	; Tamanho do bloco
8008 0400		;	DUMP_EXE 		K	/0400	; Endere�o onde come�aria a execu��o (valor dummy, apenas para manter o formato)
;
; LOADER
800a 0000		;	LOADER_UL	    K	/0000
;
; CHTOI
800c 0000		;	INPUT_1_PTR     K   /0000
800e 0000		;	INPUT_2_PTR     K   /0000
8010 0000		;	OUTPUT_1        K   /0000
8012 0000		;	OUTPUT_2        K   /0000
; Rotinas

; ###################################
; DUMPER
; ###################################
;
;
; Variaveis
;
8014 0000		;	DUMP_CURRENT_ADDR               K       /0000
8016 0000		;	DUMP_COUNTER                    K       /0000
8018 0000		;	DUMP_LAST_BLOCK_SIZE            K       /0000
801a 0000		;	DUMP_TEMP                       K       /0000
801c 0000		;	DUMP_LAST_BLOCK_ADDRESS         K       /0000
801e 0000		;	DUMP_CHECKSUM                   K       /0000
8020 0000		;	DUMP_CURR_BLOCK_SIZE            K       /0000 ; funciona como counter de um bloco
; Rotina
;
8022 0000		;	DUMPER                          K       /0000
                                ; comando PD
a024 8004		;	                                LD      DUMP_UL ; Carrega unidade logica
d026 4023		;	                                +       CONST_300 ; soma dispositivo tipo disco
d028 4007		;	                                +       PUTDATA ; Adiciona comando de escrita no arquivo
a02a 9030		;	                                MM      DUMP_PD_COMMAND ; Armazena comando PD

                                ; Inicio do arquivo
a02c 8000		;	                                LD      DUMP_INI ; Carrega endereco inicial a ser lido
a02e 9014		;	                                MM      DUMP_CURRENT_ADDR ; Salva em variavel temporaria
8030 0000		;	DUMP_PD_COMMAND                 K       /0000 ; Escreve no arquivo endereço inicial

a032 8030		;	                                LD      DUMP_PD_COMMAND
a034 903a		;	                                MM      DUMP_SIZE_PD

a036 8002		;	                                LD      DUMP_TAM ; Carrega tamanho do dumper
a038 9016		;	                                MM      DUMP_COUNTER ; Salva em variavel temporaria
803a 0000		;	DUMP_SIZE_PD                    K       /0000 ; Escreve tamanho em arquivo

                                ; LAST BLOCK SIZE
                                ; lastBlockSize = tamanho - (tamanho/blockSize)  [ 7 - 7/3 = 1]
                                ; se > 0
                                ;   lastBlockInitAddress = initialAddress + ((tamanho -1 )* 2)
                                ; Exemplo
                                ; tamanho 7
                                ; blockSize = 3
                                ; 01 23 45    67 89 AB    CD
                                ; lastBlockSize = 3 - (7/3) = 1
                                ; lastBlockInitAddress = 0 + ((7 -1) * 2) C
                                ; ie, qd chegar no C, escrevo lastBlockSize palavras (1)

                                ; calcula resto da divisao de tamanho do buffer por tamanho do bloco
a03c 3006		;	                                LV      DUMP_BL ; carrega enderço do tamanho do bloco
d03e 4004		;	                                +       DIVIDE ; adiciona operador de divisao
a040 9044		;	                                MM      DUMP_DIVIDE_BY_BLOCK_SIZE ; armazena comando para a divisao por counter
a042 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
8044 0000		;	DUMP_DIVIDE_BY_BLOCK_SIZE       K       /0000 ; Divide tamanho do buffer por tamanho do bloco
a046 901a		;	                                MM      DUMP_TEMP
a048 301a		;	                                LV      DUMP_TEMP
d04a 4005		;	                                +       MULTIPLY
a04c 9050		;	                                MM      DUMP_MULT_BY_DIVISOR
a04e 8006		;	                                LD      DUMP_BL ;
8050 0000		;	DUMP_MULT_BY_DIVISOR            K       /0000
a052 901a		;	                                MM      DUMP_TEMP
a054 301a		;	                                LV      DUMP_TEMP
d056 4002		;	                                +       SUBTRACT ; add comando de subtracao
a058 905c		;	                                MM      DUMP_SUBTRACT ; armazena

;                                 ; tamanho do bloco
a05a 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
805c 0000		;	DUMP_SUBTRACT                   K       /0000 ; resultado sera TAM % BL
a05e 9018		;	                                MM      DUMP_LAST_BLOCK_SIZE ; armazena tamanho do ultimo bloco

a060 107c		;	                                JZ      DUMP_LOOP ; inicia o loop se resto igual a zero (ultimo bloco é completo)

;                                 ; LAST BLOCK ADDRESS
a062 3000		;	                                LV      DUMP_INI ; carrega endereço do endereço inicial
d064 4003		;	                                +       SUM ; comando soma
a066 9074		;	                                MM      DUMP_SUM1 ; armazena comando

d068 3010		;	                                LV      CONST_2
d06a 4005		;	                                +       MULTIPLY
a06c 9072		;	                                MM      DUMP_MULTIPLY

a06e 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
d070 5010		;	                                -       CONST_2
8072 0000		;	DUMP_MULTIPLY                   K       /0000 ; multiplica (tamanho do buffer - 2) por 2
8074 0000		;	DUMP_SUM1                       K       /0000 ; soma endereco inincial
a076 901c		;	                                MM      DUMP_LAST_BLOCK_ADDRESS ; armazena endereço de inicio do ultimo bloco

                                ; Armazena endereco de inicio do primeiro bloco
a078 8000		;	                                LD      DUMP_INI ; Carrega endereco inicial a ser lido
a07a 9014		;	                                MM      DUMP_CURRENT_ADDR ; Salva em variavel temporaria

;                                 ; ------------- MAIN LOOP -------------------
                       ; Verifica se esta no ultimo bloco
a07c 3014		;	DUMP_LOOP                       LV      DUMP_CURRENT_ADDR
d07e 4002		;	                                +       SUBTRACT
a080 9084		;	                                MM      DUMP_SUBTRACT1
a082 801c		;	                                LD      DUMP_LAST_BLOCK_ADDRESS
8084 0000		;	DUMP_SUBTRACT1                  K       /0000

a086 108e		;	                                JZ      DUMP_LAST_BLOCK

                                ; se nao é ultimo bloco, DUMP_CURR_BLOCK_SIZE = DUMP_BL
a088 8006		;	                                LD      DUMP_BL
a08a 9020		;	                                MM      DUMP_CURR_BLOCK_SIZE
a08c 0092		;	                                JP      DUMP_BLOCK_CONTINUE ; continua programa

                                ; se ultimo bloco, corrige DUMP_CURR_BLOCK_SIZE para DUMP_LAST_BLOCK_SIZE
a08e 8018		;	DUMP_LAST_BLOCK                 LD      DUMP_LAST_BLOCK_SIZE
a090 9020		;	                                MM      DUMP_CURR_BLOCK_SIZE

                                ; atualiza contador do loop principal
a092 3020		;	DUMP_BLOCK_CONTINUE             LV      DUMP_CURR_BLOCK_SIZE
d094 4002		;	                                +       SUBTRACT
a096 909a		;	                                MM      DUMP_SUBTRACT2
a098 8016		;	                                LD      DUMP_COUNTER
809a 0000		;	DUMP_SUBTRACT2                  K       /0000 ; subtrai tamanho do bloco do counter
a09c 20f2		;	                                JN      DUMPER_END_LOOP ; pula para o fim se atingiu o maximo numero de palavras (DUMP_TAM)

a09e 9016		;	                                MM      DUMP_COUNTER ; se nao, atualiza counter

                                ; zera CHECKSUM
                                ; LD      CONST_0
                                ; MM      DUMP_CHECKSUM

                                ; INICIO DO BLOCO
                                ; ESCREVE ENDERECO INICIAL
a0a0 8030		;	                                LD      DUMP_PD_COMMAND
a0a2 90aa		;	                                MM      DUMP_BLOCK_PD
a0a4 3014		;	                                LV      DUMP_CURRENT_ADDR
a0a6 91d0		;	                                MM      TARGET_ADDRESS
a0a8 a1d2		;	                                SC      LOAD_VALUE
80aa 0000		;	DUMP_BLOCK_PD                   K       /0000 ; Escreve no arquivo endereço atual

                                ; atualiza CHECKSUM para endereco
a0ac 8014		;	                                LD      DUMP_CURRENT_ADDR
a0ae 91bc		;	                                MM      CHECKSUM_CURRENT ; salva valor atual

                                ; ESCREVE TAMANHO DO BLOCO
a0b0 8030		;	                                LD      DUMP_PD_COMMAND
a0b2 90ba		;	                                MM      DUMP_BLOCK_PD1
a0b4 3020		;	                                LV      DUMP_CURR_BLOCK_SIZE
a0b6 91d0		;	                                MM      TARGET_ADDRESS
a0b8 a1d2		;	                                SC      LOAD_VALUE
80ba 0000		;	DUMP_BLOCK_PD1                  K       /0000 ; Escreve no arquivo tamanho do bloco atual

                                ; atualiza CHECKSUM para tamanho do bloco
a0bc 8020		;	                                LD      DUMP_CURR_BLOCK_SIZE
a0be 91be		;	                                MM      CHECKSUM_ADD ; salva valor atual
a0c0 a1c0		;	                                SC      UPDATE_CHECKSUM

                                ; ----****** BLOCK LOOP ******----
a0c2 8020		;	DUMP_BLOCK_LOOP                 LD      DUMP_CURR_BLOCK_SIZE ; carrega tamanho do bloco atual
d0c4 5009		;	                                -       CONST_1 ; subtrai 1
a0c6 20e8		;	                                JN      DUMP_LOOP_UPDATE ; sai do loop do bloco
a0c8 9020		;	                                MM      DUMP_CURR_BLOCK_SIZE ; atualiza contador

a0ca 8014		;	                                LD      DUMP_CURRENT_ADDR ; carrega endereco atual
d0cc 5024		;	                                -       CONST_FFE ; subtrai endereco maximo disponivel
a0ce 10f2		;	                                JZ      DUMPER_END_LOOP ; pula para o fim se atingiu o maximo  endereço disponivel na memoria (FFE)

                                ; ESCRITA NO ARQUIVO
a0d0 8030		;	                                LD      DUMP_PD_COMMAND
a0d2 90da		;	                                MM      DUMP_PD
a0d4 8014		;	                                LD      DUMP_CURRENT_ADDR ; carrega endereco atual
a0d6 91d0		;	                                MM      TARGET_ADDRESS ; armazena na variavel
a0d8 a1d2		;	                                SC      LOAD_VALUE ; chama subrotina que carrega conteudo
80da 0000		;	DUMP_PD                         K       /0000 ; Escreve valor no arquivo

                                ; atualiza CHECKSUM
a0dc 91be		;	                                MM      CHECKSUM_ADD ; salva valor atual
a0de a1c0		;	                                SC      UPDATE_CHECKSUM

                                ; atualiza proximo endereço
a0e0 8014		;	                                LD      DUMP_CURRENT_ADDR ; carrega valor do endereco
d0e2 4010		;	                                +       CONST_2 ; soma 2
a0e4 9014		;	                                MM      DUMP_CURRENT_ADDR ; atualiza valor do endereco

a0e6 00c2		;	                                JP      DUMP_BLOCK_LOOP

                                ; ----****** END BLOCK LOOP ******----

                                ; escreve CHECKSUM
a0e8 8030		;	DUMP_LOOP_UPDATE                LD      DUMP_PD_COMMAND
a0ea 90ee		;	                                MM      DUMP_PD1
a0ec 81bc		;	                                LD      CHECKSUM_CURRENT ; carrega checksum do bloco atual
80ee 0000		;	DUMP_PD1                        K       /0000 ; Escreve valor no arquivo


a0f0 007c		;	                                JP      DUMP_LOOP

                                ; ------------- END MAIN LOOP -------------------
a0f2 8030		;	DUMPER_END_LOOP                 LD      DUMP_PD_COMMAND
a0f4 90f8		;	                                MM      DUMP_PD2
a0f6 8008		;	                                LD      DUMP_EXE
80f8 0000		;	DUMP_PD2                        K       /0000 ; Escreve valor no arquivo

a0fa b022		;	DUMPER_END                      RS      DUMPER ; END da sub rotina
;
;
; ###################################
; LOADER
; ###################################
;
;
; Variaveis
;
80fc 0000		;	LOADER_CURRENT_ADDR               K       /0000
80fe 0000		;	LOADER_TOTAL_WORDS                K       /0000
8100 0000		;	LOADER_BLOCK_SIZE                 K       /0000
8102 0000		;	LOADER_CURRENT_VALUE              K       /0000
8104 0000		;	LOADER_TEMP                       K       /0000
8106 0000		;	LOADER_LAST_BLOCK_ADDRESS         K       /0000
8108 0000		;	LOADER_CHECKSUM                   K       /0000
810a 0000		;	LOADER_CURR_BLOCK_SIZE            K       /0000 ; funciona como counter de um bloco
; Rotina
;
810c 0000		;	LOADER                          K       /0000
                                ; comando GD
a10e 800a		;	                                LD      LOADER_UL ; Carrega unidade logica
d110 4023		;	                                +       CONST_300 ; soma dispositivo tipo disco
d112 4006		;	                                +       GETDATA ; Adiciona comando de escrita no arquivo
a114 9116		;	                                MM      LOADER_GD_COMMAND ; Armazena comando PD

                                ; le endereço inicial
8116 0000		;	LOADER_GD_COMMAND               K       /0000 ; Le do arquivo endereço inicial
a118 90fc		;	                                MM      LOADER_CURRENT_ADDR ; Salva em variavel temporaria

                                ; le comprimento total da imagem do texto
a11a 8116		;	                                LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a11c 911e		;	                                MM      LOADER_SIZE_PD ; Salva em variavel temporaria
811e 0000		;	LOADER_SIZE_PD                  K       /0000 ; le comprimento total
a120 90fe		;	                                MM      LOADER_TOTAL_WORDS

                                ; END_INITCIAL+ 2 * #WORD < 1001
                                ; Verifica se a imagem cabe na memória, emitindo uma mensagem de erro (FFFE no acumulador) e parando se não for o caso.
a122 30fe		;	                                LV      LOADER_TOTAL_WORDS
d124 4005		;	                                +       MULTIPLY
a126 912a		;	                                MM      LOADER_VERIFY_SIZE1
d128 8010		;	                                LD      CONST_2
812a 0000		;	LOADER_VERIFY_SIZE1             K       /0000 ; 2 x numero de palavras
a12c 9104		;	                                MM      LOADER_TEMP

a12e 3104		;	                                LV      LOADER_TEMP
d130 4003		;	                                +       SUM
a132 9136		;	                                MM      LOADER_VERIFY_SIZE2
a134 80fc		;	                                LD      LOADER_CURRENT_ADDR
8136 0000		;	LOADER_VERIFY_SIZE2             K       /0000 ; (2x num de palavras) + end inicial = A
a138 9104		;	                                MM      LOADER_TEMP

a13a 3104		;	                                LV      LOADER_TEMP
d13c 4002		;	                                +       SUBTRACT
a13e 9142		;	                                MM      LOADER_VERIFY_SIZE3
d140 8026		;	                                LD      CONST_1001
8142 0000		;	LOADER_VERIFY_SIZE3             K       /0000 ; 1001 - A
                                ; se nao couber, termina programa
a144 21ac		;	                                JN      LOADER_SIZE_ERROR


                                ;  ------------- MAIN LOOP -------------------

                                ; verifica se ja leu todas as palavas
a146 80fe		;	LOADER_MAIN_LOOP                LD      LOADER_TOTAL_WORDS
a148 11b4		;	                                JZ      LOADER_END_SUCCESS

                                ; le proximo endereco do bloco
a14a 8116		;	                                LD      LOADER_GD_COMMAND ; Carrega comando  de leitura
a14c 914e		;	                                MM      LOADER_GET_ADRESS ; Salva em variavel temporaria
814e 0000		;	LOADER_GET_ADRESS               K       /0000 ; le endereço do arquivo
a150 90fc		;	                                MM      LOADER_CURRENT_ADDR ; armazena
a152 91bc		;	                                MM      CHECKSUM_CURRENT ; armazena tamanho do bloco no checksum

                                ; le numero de words do bloco
a154 8116		;	                                LD      LOADER_GD_COMMAND ; Carrega comando  de leitura
a156 9158		;	                                MM      LOADER_GET_NUMBER ; Salva em variavel temporaria
8158 0000		;	LOADER_GET_NUMBER               K       /0000 ; le endereço do arquivo
a15a 9100		;	                                MM      LOADER_BLOCK_SIZE ; armazena
a15c 91be		;	                                MM      CHECKSUM_ADD

                                ; realiza checksum do bloco
a15e a1c0		;	                                SC      UPDATE_CHECKSUM ; soma endereco inicial do bloco e tamanho do bloco ao checksum

                                ; ----****** BLOCK LOOP ******----

                                ; verifica se ja terminou bloco atual
a160 8100		;	LOADER_BLOCK_LOOP               LD      LOADER_BLOCK_SIZE
a162 1194		;	                                JZ      END_BLOCK_LOOP

                                ; le valor atual
a164 8116		;	                                LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a166 9168		;	                                MM      LOADER_GET_NEXT_VALUE ; Salva em variavel temporaria
8168 0000		;	LOADER_GET_NEXT_VALUE           K       /0000 ; le VALOR
a16a 9102		;	                                MM      LOADER_CURRENT_VALUE ; armazena

a16c 80fc		;	                                LD      LOADER_CURRENT_ADDR
d16e 4001		;	                                +       WRITE
a170 9174		;	                                MM      LOADER_WRITE_VALUE
a172 8102		;	                                LD      LOADER_CURRENT_VALUE
8174 0000		;	LOADER_WRITE_VALUE              K       /0000 ; salva conteudo lido no endereço atual

                                ; ---- ATUALIZACOES -----

                                ; atualiza checksum
a176 91be		;	                                MM      CHECKSUM_ADD ; armazena
a178 a1c0		;	                                SC      UPDATE_CHECKSUM

                                ; atualiza endereco atual
a17a 30fc		;	                                LV      LOADER_CURRENT_ADDR
d17c 4003		;	                                +       SUM
a17e 9182		;	                                MM      LOADER_UPDATE_CURR_ADDRESS
d180 8010		;	                                LD      CONST_2
8182 0000		;	LOADER_UPDATE_CURR_ADDRESS      K       /0000 ; soma 2 ao endereçø atual
a184 90fc		;	                                MM      LOADER_CURRENT_ADDR

                                ; atualiza contador do bloco
a186 8100		;	                                LD      LOADER_BLOCK_SIZE
d188 5009		;	                                -       CONST_1
a18a 9100		;	                                MM      LOADER_BLOCK_SIZE

                                ; atualiza contador de palavras total
a18c 80fe		;	                                LD      LOADER_TOTAL_WORDS
d18e 5009		;	                                -       CONST_1
a190 90fe		;	                                MM      LOADER_TOTAL_WORDS

a192 0160		;	                                JP      LOADER_BLOCK_LOOP

                                ; ----****** END BLOCK LOOP ******----

                                ; le checksum do arquivo
a194 8116		;	END_BLOCK_LOOP                  LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a196 9198		;	                                MM      LOADER_MAKE_CHECKSUM ; Salva em variavel temporaria
8198 0000		;	LOADER_MAKE_CHECKSUM            K       /0000 ; le VALOR
a19a 9104		;	                                MM      LOADER_TEMP

                                ; checa checksum do bloco
a19c 3104		;	                                LV      LOADER_TEMP
d19e 4002		;	                                +       SUBTRACT
a1a0 91a4		;	                                MM      LOADER_VERIFY_CHECKSUM
a1a2 81bc		;	                                LD      CHECKSUM_CURRENT
81a4 0000		;	LOADER_VERIFY_CHECKSUM          K       /0000

a1a6 1146		;	                                JZ      LOADER_MAIN_LOOP ; retorna loop principal

a1a8 01b0		;	                                JP      LOADER_CHECKSUM_ERROR ; caso contrario, da erro de checksum
                                ;  ------------- MAIN LOOP -------------------
a1aa 01ba		;	                                JP      LOADER_END
                                ; tamanho da imagem maior do que espaço disponivel na memoria, carrega erro FFFE e termina
d1ac 8029		;	LOADER_SIZE_ERROR               LD      CONST_FFFE
a1ae 01ba		;	                                JP      LOADER_END
                                ; erro de checksum
d1b0 8028		;	LOADER_CHECKSUM_ERROR           LD      CONST_FFFC
a1b2 01ba		;	                                JP      LOADER_END
                                ; fim com sucesso
a1b4 8116		;	LOADER_END_SUCCESS              LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a1b6 91b8		;	                                MM      LOADER_EXE ; Salva em variavel temporaria
81b8 0000		;	LOADER_EXE                      K       /0000 ; le VALOR da proxima instrucao executavel

a1ba b10c		;	LOADER_END                      RS      LOADER ; END da sub rotina
;
;
; ###################################
; UPDATE_CHECKSUM
; ###################################
;
; Sub rotina de DUMPER e LOADER que realiza a soma de CHECKSUM_ADD a CHECKSUM_CURRENT
;
81bc 0000		;	CHECKSUM_CURRENT                K       /0000
81be 0000		;	CHECKSUM_ADD                    K       /0000
                                ; atualiza CHECKSUM
81c0 0000		;	UPDATE_CHECKSUM                 K       /0000
a1c2 31bc		;	                                LV      CHECKSUM_CURRENT
d1c4 4003		;	                                +       SUM
a1c6 91ca		;	                                MM      CHECKUSUM_SUM
a1c8 81be		;	                                LD      CHECKSUM_ADD
81ca 0000		;	CHECKUSUM_SUM                   K       /0000
a1cc 91bc		;	                                MM      CHECKSUM_CURRENT
a1ce b1c0		;	                                RS      UPDATE_CHECKSUM
;
; ###################################
; LOAD_VALUE
; ###################################
;
; Subrotina para carregar um valor que esta no endereço TARGET_ADDRESS
;
; Variaveis
;
81d0 0000		;	TARGET_ADDRESS  K /0000 ; Endereço em que esta o valor desejado
;
; Rotina
;
81d2 0000		;	LOAD_VALUE      K /0000
a1d4 81d0		;	                LD TARGET_ADDRESS ; carrega o endereço
d1d6 4000		;	                + LOAD ; Soma load
a1d8 91da		;	                MM EXEC_LOAD ; Armazena em EXEC_LOAD
81da 0000		;	EXEC_LOAD       K /0000 ; Carrega valor do endereço
a1dc b1d2		;	                RS LOAD_VALUE ; END da sub rotina
;
;
;
; ###################################
; CHTOI
; ###################################
;
; Converte duas words contendo caracteres ASCII hexadecimais para o numero
; inteiro correspondente. [exemplo: entram 3739 e 4142 e sai 79AB]
;
; Variaveis
;
81de 0000		;	CHTOI_INPUT_1_PTR       K /0000
81e0 0000		;	CHTOI_INPUT_2_PTR       K /0000
81e2 0000		;	UNPACKED_TEMP_1         K /0000
81e4 0000		;	UNPACKED_TEMP_2         K /0000
;
; Rotina
;
81e6 0000		;	CHTOI                   K       /0000
a1e8 800c		;	                        LD      INPUT_1_PTR ; Carrega endereco da primeira word
a1ea 91de		;	                        MM      CHTOI_INPUT_1_PTR ; Armazena localmente
a1ec 800e		;	                        LD      INPUT_2_PTR ; Carrega endereco da segunda word
a1ee 91e0		;	                        MM      CHTOI_INPUT_2_PTR ; Armazena localmente

                        ; Primeira word
a1f0 81de		;	                        LD      CHTOI_INPUT_1_PTR
a1f2 921a		;	                        MM      CHTOI_TEMP_WORD ; Salva endereco na variavel
a1f4 a220		;	                        SC      CHTOI_PROCESS_WORD ; Chama sub rotina que processa a palavra
a1f6 91e2		;	                        MM      UNPACKED_TEMP_1 ; Armazena na variavel local

                        ; Verifica se houve erro
d1f8 5030		;	                        -       CONST_FFFF
a1fa 1216		;	                        JZ      CHTOI_ERROR

                        ; Segunda word
a1fc 81e0		;	                        LD      CHTOI_INPUT_2_PTR ; Carrega endereco da segunda word
a1fe 921a		;	                        MM      CHTOI_TEMP_WORD ; Salva endereco na variavel
a200 a220		;	                        SC      CHTOI_PROCESS_WORD ; Chama sub rotina que processa a palavra
a202 91e4		;	                        MM      UNPACKED_TEMP_2 ; Armazena na variavel local

                        ; Verifica se houve erro
d204 5030		;	                        -       CONST_FFFF
a206 1216		;	                        JZ      CHTOI_ERROR

                        ; PACK
a208 31e2		;	                        LV      UNPACKED_TEMP_1 ; Carrega endereco da primeira word
a20a 900c		;	                        MM      INPUT_1_PTR ; Armazena na variavel de PACK
a20c 31e4		;	                        LV      UNPACKED_TEMP_2 ; Carrega endereco da segunda word
a20e 900e		;	                        MM      INPUT_2_PTR ; Armazena na variavel de PACK
a210 a28e		;	                        SC      PACK ; Chama rotina
a212 8010		;	                        LD      OUTPUT_1 ; Carrega resultado
a214 0218		;	                        JP      END_CHTOI ; Encerra rotina

d216 8030		;	CHTOI_ERROR             LD      CONST_FFFF ; Carrega valor de erro

a218 b1e6		;	END_CHTOI               RS      CHTOI ; END da sub rotina
;
;
;
; ###################################
; CHTOI_PROCESS_WORD
; ###################################
;
; Sub rotina de CHTOI que recebe uma palavra em ASCII, chama UNPACK, processa e devolve o numero interio de cada
;
;
821a 0000		;	CHTOI_TEMP_WORD             K       /0000
821c 0000		;	CHTOI_TEMP_1                K       /0000
821e 0000		;	CHTOI_TEMP_2                K       /0000

8220 0000		;	CHTOI_PROCESS_WORD          K       /0000
a222 821a		;	                            LD      CHTOI_TEMP_WORD ; Carrega endereco da palavra
a224 900c		;	                            MM      INPUT_1_PTR ; Armazena na entrada de UNPACK
a226 a2aa		;	                            SC      UNPACK ; Chama rotina UNPACK [exemplo: 4132]

a228 8010		;	                            LD      OUTPUT_1 ; Carrega primeira metade [0041]
a22a 921c		;	                            MM      CHTOI_TEMP_1 ; Armazena na variavel
a22c 8012		;	                            LD      OUTPUT_2 ; Carrega segunda metade [0041]
a22e 921e		;	                            MM      CHTOI_TEMP_2 ; Armazena na variavel

                            ; inicio do processamento mas duas metades obtidas com UNPACK

                            ; primeira metade
a230 821c		;	                            LD      CHTOI_TEMP_1 ; Carrega primeira metade [0041]
a232 925a		;	                            MM      CHTOI_TEMP_CHAR ; Armazena na variavel da sub rotina CHTOI_PROCESS_CHAR
a234 a25c		;	                            SC      CHTOI_PROCESS_CHAR ; Chama sub rotina CHTOI_PROCESS_CHAR e recebe de volta a letra [000A]
a236 921c		;	                            MM      CHTOI_TEMP_1 ; Armazena na variavel

                            ; Verifica se houve erro
d238 5030		;	                            -       CONST_FFFF
a23a 1256		;	                            JZ      CHTOI_PROCESS_WORD_ERROR

                            ;segunda metade
a23c 821e		;	                            LD      CHTOI_TEMP_2 ; Carrega segunda metade [0032]
a23e 925a		;	                            MM      CHTOI_TEMP_CHAR ; Armazena na variavel
a240 a25c		;	                            SC      CHTOI_PROCESS_CHAR ; Chama sub rotina e recebe o numero [0002]
a242 921e		;	                            MM      CHTOI_TEMP_2 ; Armazena na variavel

                            ; Verifica se houve erro
d244 5030		;	                            -       CONST_FFFF
a246 1256		;	                            JZ      CHTOI_PROCESS_WORD_ERROR

                            ; Inicio da juncao das duas metades [000A e 0002 viram 00A2]
a248 321c		;	                            LV      CHTOI_TEMP_1 ; Carrega endereco da primeira metade
a24a 900c		;	                            MM      INPUT_1_PTR ; Armazena na variavel de HALF_PACK [000A]
a24c 321e		;	                            LV      CHTOI_TEMP_2 ; Carrega endereco da segunda metade
a24e 900e		;	                            MM      INPUT_2_PTR ; Armazena na variavel de HALF_PACK [0002]
a250 a2e4		;	                            SC      HALF_PACK ; Chama sub rotina [obtem 00A2]
a252 8010		;	                            LD      OUTPUT_1 ; Carrega resultado
a254 0258		;	                            JP      END_CHTOI_PROCESS_WORD

d256 8030		;	CHTOI_PROCESS_WORD_ERROR    LD      CONST_FFFF ; Carrega valor de erro

a258 b220		;	END_CHTOI_PROCESS_WORD      RS      CHTOI_PROCESS_WORD
;
;
; ###################################
; CHTOI_PROCESS_CHAR
; ###################################
;
; Sub rotina de CHTOI que recebe uma metade de palavra ASCII [ se palavra original XYZT, recebe 00XY]
; e devolve o inteiro correspondente
;
;
825a 0000		;	CHTOI_TEMP_CHAR             K       /0000

825c 0000		;	CHTOI_PROCESS_CHAR          K       /0000
a25e 825a		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor  [exemplo: 0041]
                            ; Verificacao de char fora dos intervalos [30,39] ou [41,46]
                            ; < 30
d260 5016		;	                            -       CONST_30
a262 2288		;	                            JN      CHTOI_PROCESS_CHAR_ERROR
                            ; x == 40
a264 825a		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor
d266 5018		;	                            -       CONST_40
a268 1288		;	                            JZ      CHTOI_PROCESS_CHAR_ERROR
                            ; x > 46
a26a 825a		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor
d26c 5019		;	                            -       CONST_47
a26e 2272		;	                            JN      VALID_INPUT ; Se negativo, é valido
a270 0288		;	                            JP      CHTOI_PROCESS_CHAR_ERROR  ; Caso contrario da erro

                            ; Caso positivo, continua
a272 825a		;	VALID_INPUT                 LD      CHTOI_TEMP_CHAR ; Carrega valor  [exemplo: 0041]
d274 5016		;	                            -       CONST_30 ; Subtrai 30 para encontrar o valor inteiro [0011]
a276 925a		;	                            MM      CHTOI_TEMP_CHAR ; Armazena em variavel temporaria
d278 5014		;	                            -       CONST_10 ; CHTOI_TEMP_CHAR - 10
a27a 2284		;	                            JN      IS_NUMBER ; Se negativo, trata-se de um numero, caso contrario letra de A a F

a27c 825a		;	IS_CHAR                     LD      CHTOI_TEMP_CHAR ; Carrega o valor de char [0011]
a27e 825a		;	                            LD      CHTOI_TEMP_CHAR ; [0011]
d280 5011		;	                            -       CONST_7 ; subtrai 7 para encontrar a letra hexadecimal [000A]
a282 028a		;	                            JP      END_CHTOI_PROCESS_CHAR ; Encerra

a284 825a		;	IS_NUMBER                   LD      CHTOI_TEMP_CHAR ; carrega o numero
a286 028a		;	                            JP      END_CHTOI_PROCESS_CHAR

d288 8030		;	CHTOI_PROCESS_CHAR_ERROR    LD      CONST_FFFF ; Carrega erro

a28a b25c		;	END_CHTOI_PROCESS_CHAR      RS      CHTOI_PROCESS_CHAR
;
;
; ###################################
; PACK
; ###################################
;
; Variaveis
;
828c 0000		;	PACK_SUM            K /0000
;
; Rotina
;
828e 0000		;	PACK                K  /0000
a290 800c		;	                    LD INPUT_1_PTR ; carrega valor do endereco contido em INPUT_1_PTR
a292 91d0		;	                    MM TARGET_ADDRESS
a294 a1d2		;	                    SC LOAD_VALUE ; Carrega valor de PACK_INPUT_1
d296 6022		;	                    *  CONST_100 ; Realiza shift de duas casa para esquerda
a298 928c		;	                    MM PACK_SUM ; armazena valor em PACK_SUM
a29a 800e		;	                    LD INPUT_2_PTR ; carrega valor do endereco contido em PACK_INPUT_2
a29c 91d0		;	                    MM TARGET_ADDRESS
a29e a1d2		;	                    SC LOAD_VALUE ; Carrega valor de PACK_INPUT_2
a2a0 428c		;	                    +  PACK_SUM ; soma PACK_INPUT_1 + PACK_INPUT_2
a2a2 9010		;	                    MM OUTPUT_1 ; armazena na saida
a2a4 b28e		;	                    RS PACK ; Fim da sub rotina
;
;
; ###################################
; UNPACK
; ###################################
;
; Variaveis
;
82a6 0000		;	TEMP                K  /0000
82a8 0000		;	UNPACK_INPUT_LOCAL  K  /0000
;
; Rotina
;
82aa 0000		;	UNPACK              K  /0000
                    ; Carrega valor do endereco apontado por INPUT_1_PTR
a2ac 800c		;	                    LD INPUT_1_PTR ; Carrega endereco contido em INPUT_1_PTR
a2ae 91d0		;	                    MM TARGET_ADDRESS
a2b0 a1d2		;	                    SC LOAD_VALUE ; Carrega conteudo de entrada de UNPACK
a2b2 92a8		;	                    MM UNPACK_INPUT_LOCAL ; Salva na variavel local
d2b4 4027		;	                    + CONST_8000 ; soma 8000
a2b6 22d0		;	                    JN POSITIVE_CASE ; Caso < 0, o numero é positivo
                    ; caso negativo [ex: F123. Atualmente: F123 + 8000 = 7123]
d2b8 7022		;	NEGATIVE_CASE       / CONST_100 ; sem o sinal negativo com shift a direita [71]
a2ba 92a6		;	                    MM TEMP ; Armazena na variavel temp
                    ; Parte XY
d2bc 4020		;	                    + CONST_80 ; soma 80 para devolver o bit de sinal negativo [F1]
a2be 9010		;	                    MM OUTPUT_1 ; Armazena valor 00XY
                    ; Parte ZT
a2c0 82a6		;	                    LD TEMP ; Carrega valor em temp [71]
d2c2 6022		;	                    * CONST_100 ; Shift para esquerda [7100]
a2c4 92a6		;	                    MM TEMP ; Salva em temp
a2c6 82a8		;	                    LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
d2c8 4027		;	                    + CONST_8000 ; [F123 + 8000 = 7123]
a2ca 52a6		;	                    - TEMP ; Obtem 00ZT [7123 - 7100 = 23]
a2cc 9012		;	                    MM OUTPUT_2 ; Armazena 00 ZT em OUTPUT_2
a2ce b2aa		;	                    RS UNPACK ; END da sub rotina
                    ; Caso positivo
                    ; Parte XY
a2d0 82a8		;	POSITIVE_CASE       LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
d2d2 7022		;	                    / CONST_100 ; Realiza shift de duas casas para direita
a2d4 9010		;	                    MM OUTPUT_1 ; Salva em OUTPUT_1 00XY
                    ; Parte ZT
d2d6 6022		;	                    * CONST_100 ; Realiza shift de duas casa para esquerda, obtendo XY00
a2d8 92a6		;	                    MM TEMP ; Salva valor temporario
a2da 82a8		;	                    LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
a2dc 52a6		;	                    - TEMP ; Realiza XYZT - XY00 obtendo ZT
a2de 9012		;	                    MM OUTPUT_2 ; Salva resultado
a2e0 b2aa		;	                    RS UNPACK ; END da sub rotina
;
;
; ###################################
; HALF_PACK
; ###################################
;
; Recebe as entradas 000X e 000Y e retorna 00XY
;
; Variaveis
;
82e2 0000		;	HALF_PACK_PARTIAL_SUM   K /0000
;
; Rotina
;
82e4 0000		;	HALF_PACK               K  /0000
a2e6 800c		;	                        LD INPUT_1_PTR ; carrega valor do endereco contido em INPUT_1_PTR
a2e8 91d0		;	                        MM TARGET_ADDRESS
a2ea a1d2		;	                        SC LOAD_VALUE ; Carrega valor de HALF_PACK_INPUT_1
d2ec 6014		;	                        *  CONST_10 ; Realiza shift de uma casa para esquerda
a2ee 92e2		;	                        MM HALF_PACK_PARTIAL_SUM ; armazena valor em HALF_PACK_PARTIAL_SUM

a2f0 800e		;	                        LD INPUT_2_PTR ; carrega valor do endereco contido em HALF_PACK_INPUT_2
a2f2 91d0		;	                        MM TARGET_ADDRESS
a2f4 a1d2		;	                        SC LOAD_VALUE ; Carrega valor de HALF_PACK_INPUT_2
a2f6 42e2		;	                        +  HALF_PACK_PARTIAL_SUM ; soma HALF_PACK_INPUT_1 + HALF_PACK_INPUT_2
a2f8 9010		;	                        MM OUTPUT_1 ; armazena na saida

a2fa b2e4		;	                        RS HALF_PACK ; Fim da sub rotina

;
