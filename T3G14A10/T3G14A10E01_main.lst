4000 0000 ; "DUMPER<"		;	DUMPER 		<
4001 0000 ; "DUMP_INI<"		;	DUMP_INI 	<
4002 0000 ; "DUMP_TAM<"		;	DUMP_TAM 	<
4003 0000 ; "DUMP_UL<"		;	DUMP_UL 	<
4004 0000 ; "DUMP_BL<"		;	DUMP_BL 	<
4005 0000 ; "DUMP_EXE<"		;	DUMP_EXE 	<
;
4006 0000 ; "LOADER<"		;	LOADER	  	<
4007 0000 ; "LOADER_UL<"		;	LOADER_UL 	<
;
4008 0000 ; "CHTOI<"		;	CHTOI		<
4009 0000 ; "INPUT_1_PTR<"		;	INPUT_1_PTR	<
4010 0000 ; "INPUT_2_PTR<"		;	INPUT_2_PTR	<
;
4011 0000 ; "GETDATA<"		;	GETDATA 	<
;
4012 0000 ; "CONST_1<"		;	CONST_1 	<
4013 0000 ; "CONST_2<"		;	CONST_2 	<
4014 0000 ; "CONST_FF<"		;	CONST_FF 	<
4015 0000 ; "CONST_300<"		;	CONST_300	<
4016 0000 ; "CONST_FFFC<"		;	CONST_FFFC	<
4017 0000 ; "CONST_FFFE<"		;	CONST_FFFE	<
4018 0000 ; "CONST_FFFF<"		;	CONST_FFFF	<
;
4019 0000 ; "WORD_BARS<"		;	WORD_BARS 		<
4020 0000 ; "WORD_BARS_END<"		;	WORD_BARS_END	<
4021 0000 ; "WORD_JB<"		;	WORD_JB			<
4022 0000 ; "WORD_DU<"		;	WORD_DU			<
4023 0000 ; "WORD_LO<"		;	WORD_LO			<
4024 0000 ; "WORD_EX<"		;	WORD_EX			<

4025 0000 ; "WORD_SPACES<"		;	WORD_SPACES		<
4026 0000 ; "WORD_EOL<"		;	WORD_EOL		<
4027 0000 ; "WORD_EOF<"		;	WORD_EOF 		<
;
				;			& 	/0000
a000 0004		;	MAIN	JP 	INI		; salta para o início do programa
8002 0000		;	UL		K 	/0000 	; parâmetro: UL onde está o arquivo de batch
;
a004 a080		;	INI 		SC 	MAIN_RESET
			; Leitura de JB
a006 a0c2		;				SC 	READ_CMD
d008 5021		;				- 	WORD_JB
a00a 100e		;				JZ 	GET_CMD
a00c 0058		;				JP	ERRO_JB
			; Leitura de DU, LO ou /* (final)
a00e a0c2		;	GET_CMD		SC 	READ_CMD
a010 105e		;				JZ 	ERRO_CMD
d012 5022		;				-	WORD_DU
a014 102a		;				JZ 	GET_ARGS_DU
d016 4022		;				+ 	WORD_DU
d018 5023		;				-	WORD_LO
a01a 1032		;				JZ	GET_ARGS_LO
d01c 4023		;				+ 	WORD_LO
d01e 5024		;				- 	WORD_EX
a020 1046		;				JZ 	GET_ARGS_EX ;linha 0020
d022 4024		;				+ 	WORD_EX
d024 5020		;				- 	WORD_BARS_END
a026 1076		;				JZ	DONE_OK
a028 006a		;				JP	ERRO_FIM
;
			; Leitura dos parametros de DU
a02a a130		;	GET_ARGS_DU	SC 	READ_ARGS_DU
a02c 1064		;				JZ	ERRO_ARG
d02e a000		;				SC	DUMPER
a030 000e		;				JP	GET_CMD
			; Leitura dos parametros de LO
a032 a176		;	GET_ARGS_LO	SC 	READ_ARGS_LO
a034 1064		;				JZ	ERRO_ARG
d036 8007		;				LD 	LOADER_UL
d038 a006		;				SC	LOADER
			; O codigo abaixo deveria tratar os erros de LOAD (memoria insuficiente ou erro de checksum)
			; Todavia nao tratamos erros aqui, pois nos foi permitido assumir que as entradas estarao corretas
d03a 5017		;				-	CONST_FFFE
a03c 1054		;				JZ	ERRO_LO_FFFE
d03e 4017		;	CONTINUE1	+	CONST_FFFE
d040 5016		;				-	CONST_FFFC
a042 1056		;				JZ	ERRO_LO_FFFC
a044 000e		;	CONTINUE2	JP	GET_CMD
a046 a194		;	GET_ARGS_EX SC 	READ_ARGS_EX ; le e salva UL da imagem do programa a ser executado em LOADER_UL
d048 5018		;				- 	CONST_FFFF
a04a 1070		;				JZ 	ERRO_EX
d04c 4018		;				+ 	CONST_FFFF
			; chama loader para carregar imagem do programa na memoria
d04e a006		;				SC	LOADER ; linha 004e
8050 f0ef		;				OS 	/00EF ; chama instrucao EX
a052 000e		;				JP 	GET_CMD
;
a054 003e		;	ERRO_LO_FFFE	JP	CONTINUE1 ; Houve erro do tipo FFFE (falta de memória disponível pra load)
a056 0044		;	ERRO_LO_FFFC	JP	CONTINUE2 ; Houve erro do tipo FFFC (checksum error) no Loader
;
8058 3001		;	ERRO_JB		LV	/0001
805a f0ee		;				OS	/00EE
a05c 007c		;				JP	FIM
805e 3002		;	ERRO_CMD	LV	/0002
8060 f0ee		;				OS 	/00EE
a062 007c		;				JP	FIM
8064 3003		;	ERRO_ARG	LV	/0003
8066 f0ee		;				OS 	/00EE
a068 007c		;				JP	FIM
806a 3004		;	ERRO_FIM	LV	/0004
806c f0ee		;				OS 	/00EE
a06e 007c		;				JP	FIM
8070 3005		;	ERRO_EX 	LV 	/0005
8072 f0ee		;				OS 	/00EE
a074 007c		;				JP 	FIM
8076 3000		;	DONE_OK		LV	/0000
8078 f0ee		;				OS	/00EE
a07a 007c		;				JP	FIM
a07c c07c		;	FIM 	 	HM	FIM		; fim do programa
;
; ###################################
; MAIN_RESET
; ###################################
;
; Reseta variaveis da main
;
807e 0000		;	MAIN_READ_WORD 	K 	/0000
;
8080 0000		;	MAIN_RESET 	K       /0000
a082 8002		;				LD      UL
d084 4015		;				+       CONST_300
d086 4011		;				+       GETDATA
a088 907e		;				MM      MAIN_READ_WORD
a08a b080		;				RS 		MAIN_RESET
;
; ###################################
; GETWORD
; ###################################
;
; Escanea um par de caracteres ASCII, salvando-os no acumulador
;
808c 0000		;	GETWORD 	K       /0000
a08e 807e		;				LD      MAIN_READ_WORD
a090 9092		;				MM		GW_NEXT
8092 0000		;	GW_NEXT		K 		/0000
a094 b08c		;				RS 		GETWORD
;
; ###################################
; GETPARAM
; ###################################
;
; Escanea dois pares de caracteres ASCII e os converte ao hexadecimal correspondente, salvando-o no acumulador
;
8096 0000		;	GP_IN_1 	K		/0000
8098 0000		;	GP_IN_2 	K		/0000
;
809a 0000		;	GETPARAM 	K       /0000
a09c a08c		;				SC 		GETWORD
d09e 5026		;				- 		WORD_EOL
a0a0 10bc		;				JZ 		GP_ERRO
d0a2 4026		;				+ 		WORD_EOL
d0a4 5027		;				-		WORD_EOF
a0a6 10bc		;				JZ		GP_ERRO
d0a8 4027		;				+ 		WORD_EOF
a0aa 9096		;				MM 		GP_IN_1
a0ac a08c		;				SC 		GETWORD
a0ae 9098		;				MM 		GP_IN_2
;
a0b0 3096		;				LV		GP_IN_1
d0b2 9009		;				MM 		INPUT_1_PTR
a0b4 3098		;				LV		GP_IN_2
d0b6 9010		;				MM 		INPUT_2_PTR
d0b8 a008		;				SC 		CHTOI
a0ba 00be		;				JP		GP_END
; GP_ERRO 	LD 		CONST_FFFF ; FFFF pode ser retorno do parametro EXE (instr. executavel) do DUMPER
a0bc b09a		;	GP_ERRO 	RS 		GETPARAM
a0be b09a		;	GP_END		RS 		GETPARAM
;
; ###################################
; READ_CMD
; ###################################
;
; Le uma linha do batch.
; Retorna WORD_JB se leu //JB <EOL>
; Retorna WORD_DU se leu //DU <EOL>
; Retorna WORD_LO se leu //LO <EOL>
; Retorna WORD_EX se leu //EX <EOL>
; Retorna WORD_BARS_END se leu /* <EOF>
; Retorna 0 se houve erro de job ou comando
; Retorna 1 se houve erro de fim
;
80c0 0000		;	ANS			K 		/0000 ; Valor de retorno da sub-rotina
;
80c2 0000		;	READ_CMD	K       /0000
a0c4 a08c		;				SC		GETWORD
d0c6 5019		;				-		WORD_BARS
a0c8 10d2		;				JZ		RC_BARS ; Escaneou o "//"
d0ca 4019		;				+ 		WORD_BARS
d0cc 5020		;				- 		WORD_BARS_END
a0ce 10ec		;				JZ		RC_BARS_END ; Escaneou o "/*"
a0d0 012a		;				JP		RC_ERRO_FIM
a0d2 a08c		;	RC_BARS		SC 		GETWORD
d0d4 5021		;				-		WORD_JB
a0d6 10fe		;				JZ 		RC_JB ;	Escaneou o "//JB"
d0d8 4021		;				+ 		WORD_JB
d0da 5022		;				- 		WORD_DU
a0dc 1104		;				JZ		RC_DU ; Escaneou o "//DU"
d0de 4022		;				+ 		WORD_DU
d0e0 5023		;				- 		WORD_LO
a0e2 110a		;				JZ 		RC_LO ; Escaneou o "//LO"
d0e4 4023		;				+		WORD_LO
d0e6 5024		;				-		WORD_EX
a0e8 1110		;				JZ 		RC_EX ; Escaneou o "//EX"
a0ea 0126		;				JP		RC_ERRO_CMD
a0ec a08c		;	RC_BARS_END	SC 		GETWORD
d0ee 5027		;				- 		WORD_EOF
a0f0 1122		;				JZ 		RC_OK_FIM ; Escaneou o "/* <EOF>"
d0f2 4027		;				+ 		WORD_EOF
d0f4 5026		;				- 		WORD_EOL
a0f6 a08c		;				SC 		GETWORD
d0f8 5027		;				-		WORD_EOF
a0fa 1122		;				JZ 		RC_OK_FIM ; Escaneou o "/* <EOL> <EOF>"
a0fc 012a		;				JP 		RC_ERRO_FIM
;
d0fe 8021		;	RC_JB		LD 		WORD_JB
a100 90c0		;				MM		ANS
a102 0116		;				JP 		RC_GET_EOL
d104 8022		;	RC_DU		LD 		WORD_DU
a106 90c0		;				MM		ANS
a108 0116		;				JP		RC_GET_EOL
d10a 8023		;	RC_LO		LD		WORD_LO
a10c 90c0		;				MM		ANS
a10e 0116		;				JP		RC_GET_EOL
d110 8024		;	RC_EX		LD 		WORD_EX
a112 90c0		;				MM		ANS
a114 0116		;				JP		RC_GET_EOL
;
a116 a08c		;	RC_GET_EOL	SC 		GETWORD
d118 5026		;				- 		WORD_EOL
a11a 111e		;				JZ		RC_OK_CMD
a11c 0126		;				JP		RC_ERRO_CMD
;
a11e 80c0		;	RC_OK_CMD	LD 		ANS
a120 012e		;				JP 		RC_END
d122 8020		;	RC_OK_FIM	LD 		WORD_BARS_END
a124 012e		;				JP		RC_END
8126 3000		;	RC_ERRO_CMD	LV 		/0000
a128 012e		;				JP 		RC_END
812a 3001		;	RC_ERRO_FIM	LV 		/0001
a12c 012e		;				JP		RC_END
a12e b0c2		;	RC_END 		RS 		READ_CMD
;
;
; ###################################
; READ_ARGS_DU
; ###################################
;
; Le a linha de argumentos para um comando DUMP
; e os armazena nas posicoes de memoria correspondentes (DUMP_BL, DUMP_INI, DUMP_TAM, DUMP_EXE, DUMP_UL)
; Retorna 0 em caso de erro, 1 caso contrario
;
8130 0000		;	READ_ARGS_DU	K       /0000
a132 a09a		;	RAD_BL		SC		GETPARAM
			; - 		CONST_FFFF
			; JZ		RAD_ERRO
			; + 		CONST_FFFF
d134 9004		;				MM 		DUMP_BL
a136 a08c		;				SC		GETWORD
d138 5025		;				- 		WORD_SPACES
a13a 113e		;				JZ		RAD_INI
a13c 016e		;				JP 		RAD_ERRO
;
a13e a09a		;	RAD_INI		SC		GETPARAM
			; - 		CONST_FFFF
			; JZ		RAD_ERRO
			; + 		CONST_FFFF
d140 9001		;				MM 		DUMP_INI
a142 a08c		;				SC		GETWORD
d144 5025		;				- 		WORD_SPACES
a146 114a		;				JZ		RAD_TAM
a148 016e		;				JP 		RAD_ERRO
;
a14a a09a		;	RAD_TAM		SC		GETPARAM
			; - 		CONST_FFFF
			; JZ		RAD_ERRO
			; + 		CONST_FFFF
d14c 9002		;				MM 		DUMP_TAM
a14e a08c		;				SC		GETWORD
d150 5025		;				- 		WORD_SPACES
a152 1156		;				JZ		RAD_EXE
a154 016e		;				JP 		RAD_ERRO
a156 a09a		;	RAD_EXE		SC		GETPARAM
			; - 		CONST_FFFF
			; JZ		RAD_ERRO
			; + 		CONST_FFFF
d158 9005		;				MM 		DUMP_EXE
a15a a08c		;				SC		GETWORD
d15c 5025		;				- 		WORD_SPACES
a15e 1162		;				JZ		RAD_UL
a160 016e		;				JP 		RAD_ERRO
a162 a09a		;	RAD_UL		SC		GETPARAM
			; - 		CONST_FFFF
			; JZ		RAD_ERRO
			; + 		CONST_FFFF
d164 9003		;				MM 		DUMP_UL
a166 a08c		;				SC 		GETWORD ; BUG AQUI ?
d168 5026		;				-		WORD_EOL
a16a 1172		;				JZ		RAD_DONE_OK
a16c 016e		;				JP		RAD_ERRO
;
816e 3000		;	RAD_ERRO	LV		/0000
a170 0174		;				JP 		RAD_END
8172 3001		;	RAD_DONE_OK	LV 		/0001
a174 b130		;	RAD_END		RS 		READ_ARGS_DU
;
; ###################################
; READ_ARGS_LO
; ###################################
;
; Le a linha de argumentos para um comando LOAD
; Retorna 0 em caso de erro, 1 caso contrario
;
8176 0000		;	READ_ARGS_LO	K       /0000
a178 a09a		;				SC		GETPARAM
d17a 5018		;				- 		CONST_FFFF
a17c 118a		;				JZ		RAL_ERRO
d17e 4018		;				+ 		CONST_FFFF
d180 9007		;				MM 		LOADER_UL
a182 a08c		;				SC		GETWORD
d184 5026		;				- 		WORD_EOL
a186 118e		;				JZ		RAL_DONE_OK
a188 018a		;				JP 		RAL_ERRO
;
818a 3000		;	RAL_ERRO	LV		/0000
a18c 0190		;				JP 		RAL_END
818e 3001		;	RAL_DONE_OK	LV 		/0001
a190 b176		;	RAL_END		RS 		READ_ARGS_LO
;
;
; ###################################
; READ_ARGS_EX
; ###################################
;
; Le a linha de argumentos para um comando EX
; Retorna o valor do (único) parametro de EX FFFF ou FFFF em caso de erro
;
8192 0000		;	EX_ADDRESS		K 		/0000
;
8194 0000		;	READ_ARGS_EX	K       /0000
a196 a09a		;				SC		GETPARAM
a198 9192		;				MM 		EX_ADDRESS
			; para EX_ADDRESS ser valido precisa estar entre 0000 e 00FF, senão raise erro FFFF
d19a 8014		;				LD 		CONST_FF
a19c 5192		;				- 		EX_ADDRESS
a19e 21ac		;				JN 		RAE_ERRO
a1a0 8192		;				LD 		EX_ADDRESS
d1a2 9007		;				MM 		LOADER_UL
a1a4 a08c		;				SC		GETWORD
d1a6 5026		;				- 		WORD_EOL
a1a8 11b0		;				JZ		RAE_DONE_OK
a1aa 01ac		;				JP 		RAE_ERRO
;
d1ac 8018		;	RAE_ERRO	LD 		CONST_FFFF
a1ae 01b2		;				JP 		RAE_END
a1b0 8192		;	RAE_DONE_OK	LD 		EX_ADDRESS
a1b2 b194		;	RAE_END		RS 		READ_ARGS_EX
;
