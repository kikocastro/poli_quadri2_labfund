; Importa constantes
;
4000 0000 ; "LOAD<"		;	LOAD        <
4001 0000 ; "WRITE<"		;	WRITE       <
4002 0000 ; "SUBTRACT<"		;	SUBTRACT    <
4003 0000 ; "GETDATA<"		;	GETDATA     <

4004 0000 ; "CONST_0<"		;	CONST_0                 <
4005 0000 ; "CONST_1<"		;	CONST_1                 <
4006 0000 ; "CONST_2<"		;	CONST_2                 <
4007 0000 ; "CONST_7<"		;	CONST_7                 <
4008 0000 ; "CONST_9<"		;	CONST_9                 <
4009 0000 ; "CONST_A<"		;	CONST_A                 <
4010 0000 ; "CONST_10<"		;	CONST_10                <
4011 0000 ; "CONST_F<"		;	CONST_F                 <
4012 0000 ; "CONST_30<"		;	CONST_30                <
4013 0000 ; "CONST_3A<"		;	CONST_3A                <
4014 0000 ; "CONST_40<"		;	CONST_40                <
4015 0000 ; "CONST_47<"		;	CONST_47                <
4016 0000 ; "CONST_80<"		;	CONST_80                <
4017 0000 ; "CONST_FF<"		;	CONST_FF                <
4018 0000 ; "CONST_100<"		;	CONST_100               <
4019 0000 ; "CONST_300<"		;	CONST_300               <
4020 0000 ; "CONST_0D0A<"		;	CONST_0D0A              <
4021 0000 ; "CONST_1000<"		;	CONST_1000              <
4022 0000 ; "CONST_8000<"		;	CONST_8000              <
4023 0000 ; "CONST_FFFF<"		;	CONST_FFFF              <

4024 0000 ; "MEM_START<"		;	MEM_START   <
4025 0000 ; "MEM_END<"		;	MEM_END     <
;
; Entradas e saidas
;
; INPUT_1_PTR >
; INPUT_2_PTR >
; INPUT_3_PTR >

2006 0000 ; "GL_UL>"		;	GL_UL       >
2008 0000 ; "GL_BUF>"		;	GL_BUF      >
200a 0000 ; "GL_END>"		;	GL_END      >

; OUTPUT_1    <
; OUTPUT_2    <
; OUTPUT_3    <
;
; Rotinas
;
2014 0000 ; "PACK>"		;	PACK        >
2030 0000 ; "UNPACK>"		;	UNPACK      >
2070 0000 ; "MEMCPY>"		;	MEMCPY      >
217c 0000 ; "CHTOI>"		;	CHTOI       >
20f4 0000 ; "UITOCH>"		;	UITOCH      >
2224 0000 ; "HALF_PACK>"		;	HALF_PACK   >
2268 0000 ; "GETLINEF>"		;	GETLINEF    >
;
				;	& /0000 ; Origem relocavel
;
8000 0000		;	INPUT_1_PTR    K /0000 ; Endereco da entrada 1
8002 0000		;	INPUT_2_PTR    K /0000 ; Endereco da entrada 2
8004 0000		;	INPUT_3_PTR    K /0000 ; Endereco da entrada 3
;
8006 0000		;	GL_UL       K /0000 ; Unidade Logica
8008 0000		;	GL_BUF      K /0000 ; Tamanho do buffer
800a 0000		;	GL_END      K /0000 ; Endereco do buffer

800c 0000		;	OUTPUT_1    K /0000 ; Endereco da entrada 1
800e 0000		;	OUTPUT_2    K /0000 ; Endereco da entrada 2
8010 0000		;	OUTPUT_3    K /0000 ; Endereco da entrada 3
;
; Rotinas
;
; ###################################
; PACK
; ###################################
;
; Variaveis
;
8012 0000		;	SUM                 K /0000
;
; Rotina
;
8014 0000		;	PACK                K  /0000
a016 8000		;	                    LD INPUT_1_PTR ; carrega valor do endereco contido em INPUT_1_PTR
a018 90e0		;	                    MM TARGET_ADDRESS
a01a a0e2		;	                    SC LOAD_VALUE ; Carrega valor de PACK_INPUT_1
d01c 6018		;	                    *  CONST_100 ; Realiza shift de duas casa para esquerda
a01e 9012		;	                    MM SUM ; armazena valor em SUM
a020 8002		;	                    LD INPUT_2_PTR ; carrega valor do endereco contido em PACK_INPUT_2
a022 90e0		;	                    MM TARGET_ADDRESS
a024 a0e2		;	                    SC LOAD_VALUE ; Carrega valor de PACK_INPUT_2
a026 4012		;	                    +  SUM ; soma PACK_INPUT_1 + PACK_INPUT_2
a028 900c		;	                    MM OUTPUT_1 ; armazena na saida
a02a b014		;	                    RS PACK ; Fim da sub rotina
;
;
; ###################################
; UNPACK
; ###################################
;
; Variaveis
;
802c 0000		;	TEMP                K  /0000
802e 0000		;	UNPACK_INPUT_LOCAL  K  /0000
;
; Rotina
;
8030 0000		;	UNPACK              K  /0000
                    ; Carrega valor do endereco apontado por INPUT_1_PTR
a032 8000		;	                    LD INPUT_1_PTR ; Carrega endereco contido em INPUT_1_PTR
a034 90e0		;	                    MM TARGET_ADDRESS
a036 a0e2		;	                    SC LOAD_VALUE ; Carrega conteudo de entrada de UNPACK
a038 902e		;	                    MM UNPACK_INPUT_LOCAL ; Salva na variavel local
d03a 4022		;	                    + CONST_8000 ; soma 8000
a03c 2056		;	                    JN POSITIVE_CASE ; Caso < 0, o numero é positivo
                    ; caso negativo [ex: F123. Atualmente: F123 + 8000 = 7123]
d03e 7018		;	NEGATIVE_CASE       / CONST_100 ; sem o sinal negativo com shift a direita [71]
a040 902c		;	                    MM TEMP ; Armazena na variavel temp
                    ; Parte XY
d042 4016		;	                    + CONST_80 ; soma 80 para devolver o bit de sinal negativo [F1]
a044 900c		;	                    MM OUTPUT_1 ; Armazena valor 00XY
                    ; Parte ZT
a046 802c		;	                    LD TEMP ; Carrega valor em temp [71]
d048 6018		;	                    * CONST_100 ; Shift para esquerda [7100]
a04a 902c		;	                    MM TEMP ; Salva em temp
a04c 802e		;	                    LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
d04e 4022		;	                    + CONST_8000 ; [F123 + 8000 = 7123]
a050 502c		;	                    - TEMP ; Obtem 00ZT [7123 - 7100 = 23]
a052 900e		;	                    MM OUTPUT_2 ; Armazena 00 ZT em OUTPUT_2
a054 b030		;	                    RS UNPACK ; END da sub rotina
                    ; Caso positivo
                    ; Parte XY
a056 802e		;	POSITIVE_CASE       LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
d058 7018		;	                    / CONST_100 ; Realiza shift de duas casas para direita
a05a 900c		;	                    MM OUTPUT_1 ; Salva em OUTPUT_1 00XY
                    ; Parte ZT
d05c 6018		;	                    * CONST_100 ; Realiza shift de duas casa para esquerda, obtendo XY00
a05e 902c		;	                    MM TEMP ; Salva valor temporario
a060 802e		;	                    LD UNPACK_INPUT_LOCAL ; Carrega valor inicial
a062 502c		;	                    - TEMP ; Realiza XYZT - XY00 obtendo ZT
a064 900e		;	                    MM OUTPUT_2 ; Salva resultado
a066 b030		;	                    RS UNPACK ; END da sub rotina
;
;
; ###################################
; MEMCPY
; ###################################
;
; Variaveis
;
8068 0000		;	COUNT                   K       /0000
806a 0000		;	SIZE                    K       /0000
806c 0000		;	ORIGIN                  K       /0000
806e 0000		;	DESTINATION             K       /0000
;
; Rotina
;
8070 0000		;	MEMCPY                  K       /0000
                        ; Carrega valores de entrada
a072 8000		;	                        LD      INPUT_1_PTR ; carrega o endereço
d074 4000		;	                        +       LOAD ; Soma load
a076 9078		;	                        MM      UNPACK_EXEC1 ; Armazena em UNPACK_EXEC1
8078 0000		;	UNPACK_EXEC1            K       /0000 ; Carrega valor do endereço
a07a 906a		;	                        MM      SIZE ; Armazena
a07c 8002		;	                        LD      INPUT_2_PTR ; carrega o endereço
d07e 4000		;	                        +       LOAD ; Soma load
a080 9082		;	                        MM      UNPACK_EXEC2 ; Armazena em UNPACK_EXEC2
8082 0000		;	UNPACK_EXEC2            K       /0000 ; Carrega valor do endereço
a084 906c		;	                        MM      ORIGIN ; Armazena
a086 8004		;	                        LD      INPUT_3_PTR ; carrega o endereço
d088 4000		;	                        +       LOAD ; Soma load
a08a 908c		;	                        MM      UNPACK_EXEC3 ; Armazena em UNPACK_EXEC3
808c 0000		;	UNPACK_EXEC3            K       /0000 ; Carrega valor do endereço
a08e 906e		;	                        MM      DESTINATION ; Armazena
                        ; Tratamento de erros de Input
                        ; 1) Endereço inicial + o numero de palavras > endereço maximo
d090 8025		;	                        LD      MEM_END   ; Carrega o endereço maximo de destino
a092 506a		;	                        -       SIZE
a094 506a		;	                        -       SIZE ; Subtrai numero de enderecos de words que serao copiadas (Duas vezes pois cada palavra ocupa 2 Bytes)
a096 506e		;	                        -       DESTINATION  ; Subtrai o endereço inicial do destino
a098 20dc		;	                        JN      END_FAIL  ; Caso o endereço inicial + o numero de palavras > endereço maximo, ERRO
                        ; 2) Endereço de destino esta antes do intervalo
a09a 806e		;	                        LD      DESTINATION
d09c 5024		;	                        -       MEM_START
a09e 20dc		;	                        JN      END_FAIL
                        ; 3) Origem esta antes do intervalo
a0a0 806c		;	                        LD      ORIGIN
d0a2 5024		;	                        -       MEM_START
a0a4 20dc		;	                        JN      END_FAIL
                        ; 4) Origem esta a frente do intervalo
d0a6 8025		;	                        LD      MEM_END
a0a8 506c		;	                        -       ORIGIN
a0aa 506a		;	                        -       SIZE
a0ac 506a		;	                        -       SIZE
a0ae 20dc		;	                        JN      END_FAIL
                        ; Comeco de MEMCPY
a0b0 806a		;	LOOP                    LD      SIZE ; Carrega o numero de words no acumulador
a0b2 5068		;	                        -       COUNT     ; Subtrai o contador do acumulador
a0b4 10d8		;	                        JZ      END_SUCCESS ; Caso o contador seja igual ao numero de words, encerra

a0b6 806e		;	                        LD      DESTINATION ; Carrega endereco de destino
d0b8 4001		;	                        +       WRITE   ; Adiciona comando MM
a0ba 90c2		;	                        MM      MEMCPY_EXEC   ; Armazena em MEMCPY_EXEC

a0bc 806c		;	                        LD      ORIGIN ; Carrega endereço de origem
a0be 90e0		;	                        MM      TARGET_ADDRESS
a0c0 a0e2		;	                        SC      LOAD_VALUE ; Carrega valor no endereco de origem

80c2 0000		;	MEMCPY_EXEC             K       /0000 ; Armazena o valor no endereco de destino
a0c4 806e		;	                        LD      DESTINATION  ; Carrega o endereço de destino
d0c6 4006		;	                        +       CONST_2   ; Avança 2 posições na memoria
a0c8 906e		;	                        MM      DESTINATION  ; Atualiza DESTINATION

a0ca 806c		;	                        LD      ORIGIN ; Carrega o endereço de origem
d0cc 4006		;	                        +       CONST_2   ; Avança 2 posições na memoria
a0ce 906c		;	                        MM      ORIGIN ; Atualiza ORIGIN

a0d0 8068		;	                        LD      COUNT     ; Carrega o contador no acumulador
d0d2 4005		;	                        +       CONST_1     ; Soma 1
a0d4 9068		;	                        MM      COUNT     ; Atualiza CONT

a0d6 00b0		;	                        JP      LOOP

d0d8 8004		;	END_SUCCESS             LD      CONST_0   ; Se o programa finalizar com sucesso, coloca 0x0000 no acumulador
a0da 00de		;	                        JP      RETURN_MEMCPY
d0dc 8023		;	END_FAIL                LD      CONST_FFFF ; Se o programa finalizar com falhas, coloca 0xFFFF no acumulador

a0de b070		;	RETURN_MEMCPY           RS      MEMCPY
;
;
; ###################################
; LOAD_VALUE
; ###################################
;
; Subrotina para carregar um valor que esta no endereço TARGET_ADDRESS
;
; Variaveis
;
80e0 0000		;	TARGET_ADDRESS  K /0000 ; Endereço em que esta o valor desejado
;
; Rotina
;
80e2 0000		;	LOAD_VALUE      K /0000
a0e4 80e0		;	                LD TARGET_ADDRESS ; carrega o endereço
d0e6 4000		;	                + LOAD ; Soma load
a0e8 90ea		;	                MM EXEC_LOAD ; Armazena em EXEC_LOAD
80ea 0000		;	EXEC_LOAD       K /0000 ; Carrega valor do endereço
a0ec b0e2		;	                RS LOAD_VALUE ; END da sub rotina
;
;
; ###################################
; UITOCH
; ###################################
;
; Converte um numero intero para duas words contendo caracteres ASCII
; correspondentes. [exemplo: entra 79AB e saem 3739 e 4142]
;
; Variaveis
;
80ee 0000		;	UITOCH_INPUT_PTR        K /0000
80f0 0000		;	UITOCH_TEMP_1           K /0000
80f2 0000		;	UITOCH_TEMP_2           K /0000
;
; Rotina
;
80f4 0000		;	UITOCH                  K       /0000

                        ; nesse ponto o endereço da entrada ja esta em INPUT_1_PTR,
                        ; entao, chama-se UNPACK diretamente.
a0f6 a030		;	                        SC      UNPACK ; Chama a rotina

a0f8 800e		;	                        LD      OUTPUT_2 ; Carrega a segunda metade [Ex: Se int = 79AB, carrega 00AB]
a0fa 90f2		;	                        MM      UITOCH_TEMP_2 ; Armazena temporariamente

                        ; Primeira palavra
a0fc 300c		;	                        LV      OUTPUT_1 ; Carrega endereco que contem [0079]
a0fe 9000		;	                        MM      INPUT_1_PTR ; Armazena
a100 a240		;	                        SC      HALF_UNPACK ; Chama rotina
a102 800c		;	                        LD      OUTPUT_1 ; [0007]
a104 9134		;	                        MM      UITOCH_WORD_1
a106 800e		;	                        LD      OUTPUT_2 ; [0009]
a108 9136		;	                        MM      UITOCH_WORD_2
a10a a138		;	                        SC      UITOCH_PROCESS_WORD ; Chama sub-rotina
a10c 90f0		;	                        MM      UITOCH_TEMP_1 ; [3739]

                        ; Verifica se houve erro
d10e 5023		;	                        -       CONST_FFFF
a110 1130		;	                        JZ      UITOCH_ERROR

                        ; Segunda palavra
a112 30f2		;	                        LV      UITOCH_TEMP_2 ; Carrega endereco que tem [00AB]
a114 9000		;	                        MM      INPUT_1_PTR ; Armazena
a116 a240		;	                        SC      HALF_UNPACK ; Chama rotina
a118 800c		;	                        LD      OUTPUT_1
a11a 9134		;	                        MM      UITOCH_WORD_1 ; [000A]
a11c 800e		;	                        LD      OUTPUT_2
a11e 9136		;	                        MM      UITOCH_WORD_2 ; [000B]
a120 a138		;	                        SC      UITOCH_PROCESS_WORD ; Chama sub-rotina
a122 90f2		;	                        MM      UITOCH_TEMP_2 ; [4142]

                        ; Verifica se houve erro
d124 5023		;	                        -       CONST_FFFF
a126 1130		;	                        JZ      UITOCH_ERROR

                        ; Se nao houve, armazena na saida
a128 80f0		;	                        LD      UITOCH_TEMP_1
a12a 900c		;	                        MM      OUTPUT_1
a12c 80f2		;	                        LD      UITOCH_TEMP_2
a12e 900e		;	                        MM      OUTPUT_2

d130 8023		;	UITOCH_ERROR            LD      CONST_FFFF ; Carrega valor de erro

a132 b0f4		;	END_UITOCH              RS      UITOCH ; END da sub rotina
;
;
; ###################################
; UITOCH_PROCESS_WORD
; ###################################
;
; Sub rotina de UITOCH que carrega os inteiros [ex 0007 e 0009]
; e devolve o caracter ASCII correspondente [ex 3739]
;
8134 0000		;	UITOCH_WORD_1               K       /0000
8136 0000		;	UITOCH_WORD_2               K       /0000
;
8138 0000		;	UITOCH_PROCESS_WORD         K       /0000

a13a 8134		;	                            LD      UITOCH_WORD_1 ; Carrega valor  [exemplo: 0007]
a13c 9156		;	                            MM      UITOCH_TEMP_CHAR ; Armazena
a13e a15a		;	                            SC      UITOCH_PROCESS_CHAR ; Chama sub-rotina
a140 9134		;	                            MM      UITOCH_WORD_1 ; Armazena [0037]

a142 8136		;	                            LD      UITOCH_WORD_2 ; Carrega valor  [exemplo: 0009]
a144 9156		;	                            MM      UITOCH_TEMP_CHAR ; Armazena
a146 a15a		;	                            SC      UITOCH_PROCESS_CHAR ; Cahama sub-rotina
a148 9136		;	                            MM      UITOCH_WORD_2 ; Armazena [0039]

a14a 3134		;	                            LV      UITOCH_WORD_1 ; Carrega endereco [0037]
a14c 9000		;	                            MM      INPUT_1_PTR ; Armazena na entrada
a14e 3136		;	                            LV      UITOCH_WORD_2 ; Carrega endereco [0039]
a150 9002		;	                            MM      INPUT_2_PTR ; Armazena na entrada

a152 a014		;	                            SC      PACK ; Chama rotina [recebe 3739]

a154 b138		;	END_UITOCH_PROCESS_WORD     RS      UITOCH_PROCESS_WORD
;
;
; ###################################
; UITOCH_PROCESS_CHAR
; ###################################
;
; Sub rotina de UITOCH_CHTOI que recebe uma metade de palavra ASCII [ se palavra original XYZT, recebe 00XY]
; e devolve o inteiro correspondente
;
;
8156 0000		;	UITOCH_TEMP_CHAR            K       /0000
8158 0000		;	UITOCH_CHAR_TEMP            K       /0000

815a 0000		;	UITOCH_PROCESS_CHAR         K       /0000
a15c 8156		;	                            LD      UITOCH_TEMP_CHAR ; Carrega valor  [exemplo: 0007]
d15e 4012		;	                            +       CONST_30 ; [0037]
a160 9156		;	                            MM      UITOCH_TEMP_CHAR ; Armazena em variavel temporaria
d162 5013		;	                            -       CONST_3A ; UITOCH_TEMP_CHAR - 3A
a164 216c		;	                            JN      UITOCH_IS_NUMBER ; Se negativo, trata-se de um numero, caso contrario char de A a F
                            ; Caso char
a166 8156		;	                            LD      UITOCH_TEMP_CHAR ; Carrega o valor de char [0037]
d168 4007		;	                            +       CONST_7 ; soma 7 para encontrar o valor inteiro [0041]
a16a 0172		;	                            JP      END_UITOCH_PROCESS_CHAR ; Encerra

a16c 8156		;	UITOCH_IS_NUMBER            LD      UITOCH_TEMP_CHAR ; carrega o numero
a16e 0172		;	                            JP      END_UITOCH_PROCESS_CHAR

d170 8023		;	UITOCH_PROCESS_CHAR_ERROR   LD      CONST_FFFF ; Carrega erro

a172 b15a		;	END_UITOCH_PROCESS_CHAR     RS      UITOCH_PROCESS_CHAR
;
;
; ###################################
; CHTOI
; ###################################
;
; Converte duas words contendo caracteres ASCII hexadecimais para o numero
; inteiro correspondente. [exemplo: entram 3739 e 4142 e sai 79AB]
;
; Variaveis
;
8174 0000		;	CHTOI_INPUT_1_PTR       K /0000
8176 0000		;	CHTOI_INPUT_2_PTR       K /0000
8178 0000		;	UNPACKED_TEMP_1         K /0000
817a 0000		;	UNPACKED_TEMP_2         K /0000
;
; Rotina
;
817c 0000		;	CHTOI                   K       /0000

a17e 8000		;	                        LD      INPUT_1_PTR ; Carrega endereco da primeira word
a180 9174		;	                        MM      CHTOI_INPUT_1_PTR ; Armazena localmente
a182 8002		;	                        LD      INPUT_2_PTR ; Carrega endereco da segunda word
a184 9176		;	                        MM      CHTOI_INPUT_2_PTR ; Armazena localmente

                        ; Primeira word
a186 8174		;	                        LD      CHTOI_INPUT_1_PTR
a188 91b0		;	                        MM      CHTOI_TEMP_WORD ; Salva endereco na variavel
a18a a1b6		;	                        SC      CHTOI_PROCESS_WORD ; Chama sub rotina que processa a palavra
a18c 9178		;	                        MM      UNPACKED_TEMP_1 ; Armazena na variavel local

                        ; Verifica se houve erro
d18e 5023		;	                        -       CONST_FFFF
a190 11ac		;	                        JZ      CHTOI_ERROR

                        ; Segunda word
a192 8176		;	                        LD      CHTOI_INPUT_2_PTR ; Carrega endereco da segunda word
a194 91b0		;	                        MM      CHTOI_TEMP_WORD ; Salva endereco na variavel
a196 a1b6		;	                        SC      CHTOI_PROCESS_WORD ; Chama sub rotina que processa a palavra
a198 917a		;	                        MM      UNPACKED_TEMP_2 ; Armazena na variavel local

                        ; Verifica se houve erro
d19a 5023		;	                        -       CONST_FFFF
a19c 11ac		;	                        JZ      CHTOI_ERROR

                        ; PACK
a19e 3178		;	                        LV      UNPACKED_TEMP_1 ; Carrega endereco da primeira word
a1a0 9000		;	                        MM      INPUT_1_PTR ; Armazena na variavel de PACK
a1a2 317a		;	                        LV      UNPACKED_TEMP_2 ; Carrega endereco da segunda word
a1a4 9002		;	                        MM      INPUT_2_PTR ; Armazena na variavel de PACK
a1a6 a014		;	                        SC      PACK ; Chama rotina
a1a8 800c		;	                        LD      OUTPUT_1 ; Carrega resultado
a1aa 01ae		;	                        JP      END_CHTOI ; Encerra rotina

d1ac 8023		;	CHTOI_ERROR             LD      CONST_FFFF ; Carrega valor de erro

a1ae b17c		;	END_CHTOI               RS      CHTOI ; END da sub rotina
;
;
;
; ###################################
; CHTOI_PROCESS_WORD
; ###################################
;
; Sub rotina de CHTOI que recebe uma palavra em ASCII, chama UNPACK, processa e devolve o numero interio de cada
;
;
81b0 0000		;	CHTOI_TEMP_WORD             K       /0000
81b2 0000		;	CHTOI_TEMP_1                K       /0000
81b4 0000		;	CHTOI_TEMP_2                K       /0000

81b6 0000		;	CHTOI_PROCESS_WORD          K       /0000
a1b8 81b0		;	                            LD      CHTOI_TEMP_WORD ; Carrega endereco da palavra
a1ba 9000		;	                            MM      INPUT_1_PTR ; Armazena na entrada de UNPACK
a1bc a030		;	                            SC      UNPACK ; Chama rotina UNPACK [exemplo: 4132]

a1be 800c		;	                            LD      OUTPUT_1 ; Carrega primeira metade [0041]
a1c0 91b2		;	                            MM      CHTOI_TEMP_1 ; Armazena na variavel
a1c2 800e		;	                            LD      OUTPUT_2 ; Carrega segunda metade [0041]
a1c4 91b4		;	                            MM      CHTOI_TEMP_2 ; Armazena na variavel

                            ; inicio do processamento mas duas metades obtidas com UNPACK

                            ; primeira metade
a1c6 81b2		;	                            LD      CHTOI_TEMP_1 ; Carrega primeira metade [0041]
a1c8 91f0		;	                            MM      CHTOI_TEMP_CHAR ; Armazena na variavel da sub rotina CHTOI_PROCESS_CHAR
a1ca a1f2		;	                            SC      CHTOI_PROCESS_CHAR ; Chama sub rotina CHTOI_PROCESS_CHAR e recebe de volta a letra [000A]
a1cc 91b2		;	                            MM      CHTOI_TEMP_1 ; Armazena na variavel

                            ; Verifica se houve erro
d1ce 5023		;	                            -       CONST_FFFF
a1d0 11ec		;	                            JZ      CHTOI_PROCESS_WORD_ERROR

                            ;segunda metade
a1d2 81b4		;	                            LD      CHTOI_TEMP_2 ; Carrega segunda metade [0032]
a1d4 91f0		;	                            MM      CHTOI_TEMP_CHAR ; Armazena na variavel
a1d6 a1f2		;	                            SC      CHTOI_PROCESS_CHAR ; Chama sub rotina e recebe o numero [0002]
a1d8 91b4		;	                            MM      CHTOI_TEMP_2 ; Armazena na variavel

                            ; Verifica se houve erro
d1da 5023		;	                            -       CONST_FFFF
a1dc 11ec		;	                            JZ      CHTOI_PROCESS_WORD_ERROR

                            ; Inicio da juncao das duas metades [000A e 0002 viram 00A2]
a1de 31b2		;	                            LV      CHTOI_TEMP_1 ; Carrega endereco da primeira metade
a1e0 9000		;	                            MM      INPUT_1_PTR ; Armazena na variavel de HALF_PACK [000A]
a1e2 31b4		;	                            LV      CHTOI_TEMP_2 ; Carrega endereco da segunda metade
a1e4 9002		;	                            MM      INPUT_2_PTR ; Armazena na variavel de HALF_PACK [0002]
a1e6 a224		;	                            SC      HALF_PACK ; Chama sub rotina [obtem 00A2]
a1e8 800c		;	                            LD      OUTPUT_1 ; Carrega resultado
a1ea 01ee		;	                            JP      END_CHTOI_PROCESS_WORD

d1ec 8023		;	CHTOI_PROCESS_WORD_ERROR    LD      CONST_FFFF ; Carrega valor de erro

a1ee b1b6		;	END_CHTOI_PROCESS_WORD      RS      CHTOI_PROCESS_WORD
;
;
; ###################################
; CHTOI_PROCESS_CHAR
; ###################################
;
; Sub rotina de CHTOI que recebe uma metade de palavra ASCII [ se palavra original XYZT, recebe 00XY]
; e devolve o inteiro correspondente
;
;
81f0 0000		;	CHTOI_TEMP_CHAR             K       /0000

81f2 0000		;	CHTOI_PROCESS_CHAR          K       /0000
a1f4 81f0		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor  [exemplo: 0041]
                            ; Verificacao de char fora dos intervalos [30,39] ou [41,46]
                            ; < 30
d1f6 5012		;	                            -       CONST_30
a1f8 221e		;	                            JN      CHTOI_PROCESS_CHAR_ERROR
                            ; x == 40
a1fa 81f0		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor
d1fc 5014		;	                            -       CONST_40
a1fe 121e		;	                            JZ      CHTOI_PROCESS_CHAR_ERROR
                            ; x > 46
a200 81f0		;	                            LD      CHTOI_TEMP_CHAR ; Carrega valor
d202 5015		;	                            -       CONST_47
a204 2208		;	                            JN      VALID_INPUT ; Se negativo, é valido
a206 021e		;	                            JP      CHTOI_PROCESS_CHAR_ERROR  ; Caso contrario da erro

                            ; Caso positivo, continua
a208 81f0		;	VALID_INPUT                 LD      CHTOI_TEMP_CHAR ; Carrega valor  [exemplo: 0041]
d20a 5012		;	                            -       CONST_30 ; Subtrai 30 para encontrar o valor inteiro [0011]
a20c 91f0		;	                            MM      CHTOI_TEMP_CHAR ; Armazena em variavel temporaria
d20e 5010		;	                            -       CONST_10 ; CHTOI_TEMP_CHAR - 10
a210 221a		;	                            JN      IS_NUMBER ; Se negativo, trata-se de um numero, caso contrario letra de A a F

a212 81f0		;	IS_CHAR                     LD      CHTOI_TEMP_CHAR ; Carrega o valor de char [0011]
a214 81f0		;	                            LD      CHTOI_TEMP_CHAR ; [0011]
d216 5007		;	                            -       CONST_7 ; subtrai 7 para encontrar a letra hexadecimal [000A]
a218 0220		;	                            JP      END_CHTOI_PROCESS_CHAR ; Encerra

a21a 81f0		;	IS_NUMBER                   LD      CHTOI_TEMP_CHAR ; carrega o numero
a21c 0220		;	                            JP      END_CHTOI_PROCESS_CHAR

d21e 8023		;	CHTOI_PROCESS_CHAR_ERROR    LD      CONST_FFFF ; Carrega erro

a220 b1f2		;	END_CHTOI_PROCESS_CHAR      RS      CHTOI_PROCESS_CHAR

; ###################################
; HALF_PACK
; ###################################
;
; Recebe as entradas 000X e 000Y e retorna 00XY
;
; Variaveis
;
8222 0000		;	HALF_PACK_PARTIAL_SUM   K /0000
;
; Rotina
;
8224 0000		;	HALF_PACK               K  /0000
a226 8000		;	                        LD INPUT_1_PTR ; carrega valor do endereco contido em INPUT_1_PTR
a228 90e0		;	                        MM TARGET_ADDRESS
a22a a0e2		;	                        SC LOAD_VALUE ; Carrega valor de HALF_PACK_INPUT_1
d22c 6010		;	                        *  CONST_10 ; Realiza shift de uma casa para esquerda
a22e 9222		;	                        MM HALF_PACK_PARTIAL_SUM ; armazena valor em HALF_PACK_PARTIAL_SUM

a230 8002		;	                        LD INPUT_2_PTR ; carrega valor do endereco contido em HALF_PACK_INPUT_2
a232 90e0		;	                        MM TARGET_ADDRESS
a234 a0e2		;	                        SC LOAD_VALUE ; Carrega valor de HALF_PACK_INPUT_2
a236 4222		;	                        +  HALF_PACK_PARTIAL_SUM ; soma HALF_PACK_INPUT_1 + HALF_PACK_INPUT_2
a238 900c		;	                        MM OUTPUT_1 ; armazena na saida

a23a b224		;	                        RS HALF_PACK ; Fim da sub rotina
;
;
; ###################################
; HALF_UNPACK
; ###################################
;
; Recebe numero no format [00XY] e retorna [000X] e [000Y]
;
; Variaveis
;
823c 0000		;	HALF_UNPACK_TEMP1           K       /0000
823e 0000		;	HALF_UNPACK_TEMP2           K       /0000
;
; Rotina
;
8240 0000		;	HALF_UNPACK                 K       /0000
                            ; Carrega valor do endereco apontado por INPUT_1_PTR
a242 8000		;	                            LD      INPUT_1_PTR ; Carrega endereco contido em INPUT_1_PTR
a244 90e0		;	                            MM      TARGET_ADDRESS
a246 a0e2		;	                            SC      LOAD_VALUE ; Carrega conteudo de entrada de HALF_UNPACK
a248 923c		;	                            MM      HALF_UNPACK_TEMP1 ; Salva na variavel local [00XY]
                            ; Parte 000X
d24a 7010		;	                            /       CONST_10 ; Realiza shift de uma casa para direita [000X]
a24c 900c		;	                            MM      OUTPUT_1 ; Salva em OUTPUT_1 [000X]
                            ; Parte 000Y
d24e 6010		;	                            *       CONST_10 ; Shif para esquerda [00X0]
a250 923e		;	                            MM      HALF_UNPACK_TEMP2
a252 323e		;	                            LV      HALF_UNPACK_TEMP2
d254 4002		;	                            +       SUBTRACT
a256 925a		;	                            MM      HALF_PACK_EXEC
a258 823c		;	                            LD      HALF_UNPACK_TEMP1 ; [00XY]
825a 0000		;	HALF_PACK_EXEC              K       /0000 ; [00XY - 000Y = 00X0]

a25c 900e		;	                            MM OUTPUT_2 ; Salva resultado
a25e b240		;	                            RS HALF_UNPACK ; END da sub rotina

;
;
; ###################################
; GETLINEF
; ###################################
;
; Recebe Unidade logica, Tamanho do buffer, endereço do buffer
; Le uma linha de um arquivo texto, que contem numero par de caracteres, visto como disco pela mvn.
; Termina quando encontra final da linha (0A) ou final de arquivo (FF)
; Insere EOS no final da string
; Retorna 1 (true) se não chegar ao final do arquivo (EOF)
; Retorna 0 (false) se chegar ao final do arquivo.
;
; Variaveis
8260 0000		;	GL_BUFFER_SIZE              K       /0000 ; tamanho do buffer
8262 0000		;	GL_BUFFER_ADDRESS           K       /0000 ; endereco do buffer
8264 0000		;	GL_CURRENT_WORD             K       /0000 ; variavel temporaria para palavra atual
8266 0000		;	EOS                         K       /0000 ; Palavra de finalizacao
;
; Rotina
;
8268 0000		;	GETLINEF                    K       /0000
                            ; Prepara instrucao de GD no disco para unidade logica do parametro
a26a 8006		;	                            LD      GL_UL ; Carrega a Unidade Logica
d26c 4019		;	                            +       CONST_300 ; soma dispositivo tipo disco
d26e 4003		;	                            +       GETDATA ; soma instrucao GD
a270 9288		;	                            MM      READ_WORD ; Armazena instrucao completa

                            ; Carrega valor do tamanho do buffer
a272 8008		;	                            LD      GL_BUF ; Carrega o tamanho do buffer
a274 9260		;	                            MM      GL_BUFFER_SIZE ; Salva na variavel local

                            ; Carrega endereço do buffer
a276 800a		;	                            LD      GL_END ; Carrega o endereço do buffer
a278 9262		;	                            MM      GL_BUFFER_ADDRESS ; Salva na variavel local

                            ; Verifica se tamanho do buffer é > 1
a27a 8260		;	                            LD      GL_BUFFER_SIZE
d27c 5005		;	                            -       CONST_1
a27e 22d4		;	                            JN      GT_END ; se for 0 vai para fim
a280 12d0		;	                            JZ      GT_END_NOT_EOF ; se for 1, coloca EOS e finaliza

                            ; ----------------- LOOP -----------------

a282 8262		;	GL_LOOP                     LD      GL_BUFFER_ADDRESS ; carrega endereco atual do buffer
d284 4001		;	                            +       WRITE ; adiciona comando de escrita
a286 92b6		;	                            MM      GL_STORE_VALUE ; armazena instrucao em GL_STORE_VALUE

8288 0000		;	READ_WORD                   K       /0000 ; executa leitura do proximo valor
a28a 9264		;	                            MM      GL_CURRENT_WORD ; Salva palavra lida em variavel temporaria

                            ; Verificacoes windows
                            ; verifica se é EOL (0x0d0a)
d28c 5020		;	                            -       CONST_0D0A ; subtrai 0x0d0a
a28e 12d0		;	                            JZ      GT_END_NOT_EOF
                            ; verifica se é EOF (0xffff)
a290 8264		;	                            LD      GL_CURRENT_WORD ; recarrega palavra
d292 5023		;	                            -       CONST_FFFF
a294 12ca		;	                            JZ      GT_EOF

                            ; Chama UNPACK para separar as duas palavras
a296 3264		;	                            LV      GL_CURRENT_WORD ; carrega endereco GL_CURRENT_WORD
a298 9000		;	                            MM      INPUT_1_PTR ; armazena em INPUT_1_PTR
a29a a030		;	                            SC      UNPACK ; chama rotina

                            ; Verificacoes unix
                            ; verifica se é EOL (0x0A)
a29c 800c		;	                            LD      OUTPUT_1 ; carrega primeira palavra
d29e 5009		;	                            -       CONST_A ; subtrai A
a2a0 12d0		;	                            JZ      GT_END_NOT_EOF
                            ; verifica se é EOF
a2a2 800c		;	                            LD      OUTPUT_1 ; carrega primeira palavra
d2a4 5017		;	                            -       CONST_FF
a2a6 12ca		;	                            JZ      GT_EOF

a2a8 800e		;	                            LD      OUTPUT_2 ; Carrega segunda palavra
                            ; verifica se é EOL
d2aa 5009		;	                            -       CONST_A ; subtrai A
a2ac 12d0		;	                            JZ      GT_END_NOT_EOF
                            ; verifica se é EOF
a2ae 800e		;	                            LD      OUTPUT_2 ; Carrega segunda palavra
d2b0 5017		;	                            -       CONST_FF
a2b2 12ca		;	                            JZ      GT_EOF

                            ; se nao for EOL nem EOF, continua
a2b4 8264		;	                            LD      GL_CURRENT_WORD
82b6 0000		;	GL_STORE_VALUE              K       /0000 ; Salva valor lido no endereco atual do buffer
                            ; Atualiza loop
a2b8 8260		;	                            LD      GL_BUFFER_SIZE ; carrega tamanho atual do buffer
d2ba 5005		;	                            -       CONST_1 ; Atualiza tamanho do buffer subtraindo 1
a2bc 12d0		;	                            JZ      GT_END_NOT_EOF ; Se tamanho é zero, vai para final
a2be 9260		;	                            MM      GL_BUFFER_SIZE ; se nao, armazena novo tamanho do buffer

                            ; atualiza endereco do buffer
a2c0 8262		;	                            LD      GL_BUFFER_ADDRESS ; atualiza endereco do buffer
d2c2 4006		;	                            +       CONST_2 ; soma 2 ao endereco atual
a2c4 9262		;	                            MM      GL_BUFFER_ADDRESS ; armazena endereco atualizado

a2c6 0282		;	                            JP      GL_LOOP ; vai para proxima leitura do loop

                            ; ----------------- END LOOP -----------------

a2c8 02d0		;	                            JP      GT_END_NOT_EOF

a2ca a2d6		;	GT_EOF                      SC      GT_PUT_EOS
d2cc 8004		;	                            LD      CONST_0 ; Retorna 0 se chegou no final do arquivo
a2ce 02d4		;	                            JP      GT_END

a2d0 a2d6		;	GT_END_NOT_EOF              SC      GT_PUT_EOS
d2d2 8005		;	                            LD      CONST_1 ; Retorna 1 se nao chegou no final do arquivo

a2d4 b268		;	GT_END                      RS      GETLINEF ; END da sub rotina

;
;
; ###################################
; GT_PUT_EOS
; ###################################
;
; Sub rotina de GETLINEF
; Coloca EOS - End of string no ultimo endereco do buffer
;
82d6 0000		;	GT_PUT_EOS                  K       /0000
a2d8 8262		;	                            LD      GL_BUFFER_ADDRESS ; carrega endereco atual do buffer
d2da 4001		;	                            +       WRITE ; adiciona comando de escrita
a2dc 92e0		;	                            MM      GL_FIX_EOL ; armazena instrucao
a2de 8266		;	                            LD      EOS ; carrega end of string
82e0 0000		;	GL_FIX_EOL                  K       /0000 ; Salva valor lido no endereco atual do buffer
a2e2 b2d6		;	                            RS      GT_PUT_EOS ; retorna
