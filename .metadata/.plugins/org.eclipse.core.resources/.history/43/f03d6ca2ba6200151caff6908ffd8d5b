/**
 * Escola Politécnica da Universidade de São Paulo
 * Departamento de Engenharia de Computação e Sistemas Digitais
 * Copyright© 2001..2011, todos os direitos reservados.
 * 
 * Este programa é de uso exclusivo das disciplinas de Laboratório de
 * Fundamentos de Engenharia de Computação (PCS2024 e PCS2302) e Linguagens
 * e Compiladores (PCS2056 e PCS2508).
 * É vetada a utilização e/ou distribuição deste código sem a autorização
 * dos docentes responsáveis pela disciplina ou do departamento responsável.
 */
package mvn;

import mvn.controle.MVNException;
import mvn.controle.PainelControle;
import mvn.dispositivo.Counter;

/**
 * Classe que inicia a MVN.
 * 
 * @author PSMuniz
 * @author Diego Queiroz
 * @version 1.0 - PCS/EPUSP
 * @version 2.0 - PCS/EPUSP (MVN 4.0)
 */
public class MvnPcs{
	
	/*** Controlador da MVN */
	private static MvnControle		mvnPcs;
	
	/*** Painel de Controle da MVN */
	private static PainelControle	painel;
	
	
	/**
	 * Método principal do programa. Responsável por inicializar o controlador
	 * e anexá-lo à um Painel de Controle.<br/>
	 * <br/>
	 * <b>Pré-condição</b>: Nenhuma.<br/>
	 * <b>Pós-condição</b>: O terminal da MVN é exibido.
	 * 
	 * @param args
	 *          Parâmetros do programa. Não utilizado.
	 */
	public static void main(String args[]){
		
		Counter counter = new Counter();
		Counter counter1 = new Counter();

		System.out.println("podeEscrever");
		System.out.println(counter.podeEscrever());

		System.out.println("\npodeLer");
		System.out.println(counter.podeLer());
		
		
		System.out.println("\nequals");
		System.out.println(counter.equals(counter1));
		
		try {
			System.out.println("\nler");
			System.out.println(counter.ler());
		} catch (MVNException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			System.out.println("\nposition");
			System.out.println(counter.position());
		} catch (MVNException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		Bits8 b = new Bits8 (10);
		
		System.out.println("\nbits8");
		
		System.out.println("\nler antes");
		try {
			System.out.println(counter.ler());
		} catch (MVNException e) {
			e.printStackTrace();
		}
		
		System.out.println("\nescrever 10");
		counter.escrever(b);
		
		System.out.println("\nler depois");
		try {
			System.out.println(counter.ler());
		} catch (MVNException e) {
			e.printStackTrace();
		}
		
//		System.out.println("\nreset");
//		counter.reset();
//		System.out.println("\nler depois");
//		try {
//			System.out.println(counter.ler());
//		} catch (MVNException e) {
//			e.printStackTrace();
//		}
		
		Bits8 c = new Bits8(2);
		System.out.println("\nskip");
		try {
			counter.skip(c);
		} catch (MVNException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		System.out.println("\nler depois");
		try {
			System.out.println(counter.ler());
		} catch (MVNException e) {
			e.printStackTrace();
		}
		
		Bits8 d = new Bits8(254);
		counter.escrever(d);
		System.out.println("\nsize");
		try {
			System.out.println(counter.size());
			
		} catch (MVNException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
//		mvnPcs = new MvnControle();
//		painel = new PainelControle(mvnPcs, false);
//		painel.mostrarTerminal();
		
		
		
		
	}
	
} // Fim da Classe MvnPcs