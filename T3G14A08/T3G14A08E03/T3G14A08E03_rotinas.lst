; Importa constantes
;
4000 0000 ; "LOAD<"		;	LOAD        <
4001 0000 ; "WRITE<"		;	WRITE       <
4002 0000 ; "SUBTRACT<"		;	SUBTRACT    <
4003 0000 ; "SUM<"		;	SUM         <
4004 0000 ; "DIVIDE<"		;	DIVIDE      <
4005 0000 ; "MULTIPLY<"		;	MULTIPLY    <
4006 0000 ; "GETDATA<"		;	GETDATA     <
4007 0000 ; "PUTDATA<"		;	PUTDATA     <

4008 0000 ; "CONST_0<"		;	CONST_0                 <
4009 0000 ; "CONST_1<"		;	CONST_1                 <
4010 0000 ; "CONST_2<"		;	CONST_2                 <
4011 0000 ; "CONST_7<"		;	CONST_7                 <
4012 0000 ; "CONST_9<"		;	CONST_9                 <
4013 0000 ; "CONST_A<"		;	CONST_A                 <
4014 0000 ; "CONST_10<"		;	CONST_10                <
4015 0000 ; "CONST_F<"		;	CONST_F                 <
4016 0000 ; "CONST_30<"		;	CONST_30                <
4017 0000 ; "CONST_3A<"		;	CONST_3A                <
4018 0000 ; "CONST_40<"		;	CONST_40                <
4019 0000 ; "CONST_47<"		;	CONST_47                <
4020 0000 ; "CONST_80<"		;	CONST_80                <
4021 0000 ; "CONST_FF<"		;	CONST_FF                <
4022 0000 ; "CONST_100<"		;	CONST_100               <
4023 0000 ; "CONST_300<"		;	CONST_300               <
4024 0000 ; "CONST_FFE<"		;	CONST_FFE               <
4025 0000 ; "CONST_1000<"		;	CONST_1000              <
4026 0000 ; "CONST_1001<"		;	CONST_1001              <
4027 0000 ; "CONST_8000<"		;	CONST_8000              <
4028 0000 ; "CONST_FFFC<"		;	CONST_FFFC              <
4029 0000 ; "CONST_FFFE<"		;	CONST_FFFE              <
4030 0000 ; "CONST_FFFF<"		;	CONST_FFFF              <

4031 0000 ; "MEM_START<"		;	MEM_START   <
4032 0000 ; "MEM_END<"		;	MEM_END     <
;
; Entradas e saidas
;

;
; Rotinas
;
201a 0000 ; "DUMPER>"		;	DUMPER 		>
2104 0000 ; "LOADER>"		;	LOADER		>
;
; DUMPER
2000 0000 ; "DUMP_INI>"		;	DUMP_INI 	>
2002 0000 ; "DUMP_TAM>"		;	DUMP_TAM 	>
2004 0000 ; "DUMP_UL>"		;	DUMP_UL 	>
2006 0000 ; "DUMP_BL>"		;	DUMP_BL 	>
2008 0000 ; "DUMP_EXE>"		;	DUMP_EXE 	>
;
; LOADER
200a 0000 ; "LOADER_UL>"		;	LOADER_UL 	>
				;	& /0000 ; Origem relocavel
;
;
8000 0400		;	DUMP_INI		K	/0400	; Endere�o onde come�a o dump
8002 0032		;	DUMP_TAM	    K	/0032	; Numero total de palavras a serem "dumpadas"
8004 0000		;	DUMP_UL			K	/0000	; Unidade logica do disco a ser usado
8006 0010		;	DUMP_BL 		K	/0010	; Tamanho do bloco
8008 0400		;	DUMP_EXE 		K	/0400	; Endere�o onde come�aria a execu��o (valor dummy, apenas para manter o formato)
;
; LOADER
800a 0000		;	LOADER_UL	    K	/0000
; Rotinas

; ###################################
; DUMPER
; ###################################
;
;
; Variaveis
;
800c 0000		;	DUMP_CURRENT_ADDR               K       /0000
800e 0000		;	DUMP_COUNTER                    K       /0000
8010 0000		;	DUMP_LAST_BLOCK_SIZE            K       /0000
8012 0000		;	DUMP_TEMP                       K       /0000
8014 0000		;	DUMP_LAST_BLOCK_ADDRESS         K       /0000
8016 0000		;	DUMP_CHECKSUM                   K       /0000
8018 0000		;	DUMP_CURR_BLOCK_SIZE            K       /0000 ; funciona como counter de um bloco
; Rotina
;
801a 0000		;	DUMPER                          K       /0000
                                ; comando PD
a01c 8004		;	                                LD      DUMP_UL ; Carrega unidade logica
d01e 4023		;	                                +       CONST_300 ; soma dispositivo tipo disco
d020 4007		;	                                +       PUTDATA ; Adiciona comando de escrita no arquivo
a022 9028		;	                                MM      DUMP_PD_COMMAND ; Armazena comando PD

                                ; Inicio do arquivo
a024 8000		;	                                LD      DUMP_INI ; Carrega endereco inicial a ser lido
a026 900c		;	                                MM      DUMP_CURRENT_ADDR ; Salva em variavel temporaria
8028 0000		;	DUMP_PD_COMMAND                 K       /0000 ; Escreve no arquivo endereço inicial

a02a 8028		;	                                LD      DUMP_PD_COMMAND
a02c 9032		;	                                MM      DUMP_SIZE_PD

a02e 8002		;	                                LD      DUMP_TAM ; Carrega tamanho do dumper
a030 900e		;	                                MM      DUMP_COUNTER ; Salva em variavel temporaria
8032 0000		;	DUMP_SIZE_PD                    K       /0000 ; Escreve tamanho em arquivo

                                ; LAST BLOCK SIZE
                                ; lastBlockSize = tamanho - (tamanho/blockSize)  [ 7 - 7/3 = 1]
                                ; se > 0
                                ;   lastBlockInitAddress = initialAddress + ((tamanho -1 )* 2)
                                ; Exemplo
                                ; tamanho 7
                                ; blockSize = 3
                                ; 01 23 45    67 89 AB    CD
                                ; lastBlockSize = 3 - (7/3) = 1
                                ; lastBlockInitAddress = 0 + ((7 -1) * 2) C
                                ; ie, qd chegar no C, escrevo lastBlockSize palavras (1)

                                ; calcula resto da divisao de tamanho do buffer por tamanho do bloco
a034 3006		;	                                LV      DUMP_BL ; carrega enderço do tamanho do bloco
d036 4004		;	                                +       DIVIDE ; adiciona operador de divisao
a038 903c		;	                                MM      DUMP_DIVIDE_BY_BLOCK_SIZE ; armazena comando para a divisao por counter
a03a 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
803c 0000		;	DUMP_DIVIDE_BY_BLOCK_SIZE       K       /0000 ; Divide tamanho do buffer por tamanho do bloco
a03e 9012		;	                                MM      DUMP_TEMP
a040 3012		;	                                LV      DUMP_TEMP
d042 4005		;	                                +       MULTIPLY
a044 9048		;	                                MM      DUMP_MULT_BY_DIVISOR
a046 8006		;	                                LD      DUMP_BL ;
8048 0000		;	DUMP_MULT_BY_DIVISOR            K       /0000
a04a 9012		;	                                MM      DUMP_TEMP
a04c 3012		;	                                LV      DUMP_TEMP
d04e 4002		;	                                +       SUBTRACT ; add comando de subtracao
a050 9054		;	                                MM      DUMP_SUBTRACT ; armazena

;                                 ; tamanho do bloco
a052 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
8054 0000		;	DUMP_SUBTRACT                   K       /0000 ; resultado sera TAM % BL
a056 9010		;	                                MM      DUMP_LAST_BLOCK_SIZE ; armazena tamanho do ultimo bloco

a058 1074		;	                                JZ      DUMP_LOOP ; inicia o loop se resto igual a zero (ultimo bloco é completo)

;                                 ; LAST BLOCK ADDRESS
a05a 3000		;	                                LV      DUMP_INI ; carrega endereço do endereço inicial
d05c 4003		;	                                +       SUM ; comando soma
a05e 906c		;	                                MM      DUMP_SUM1 ; armazena comando

d060 3010		;	                                LV      CONST_2
d062 4005		;	                                +       MULTIPLY
a064 906a		;	                                MM      DUMP_MULTIPLY

a066 8002		;	                                LD      DUMP_TAM ; carrega tamanho do buffer
d068 5010		;	                                -       CONST_2
806a 0000		;	DUMP_MULTIPLY                   K       /0000 ; multiplica (tamanho do buffer - 2) por 2
806c 0000		;	DUMP_SUM1                       K       /0000 ; soma endereco inincial
a06e 9014		;	                                MM      DUMP_LAST_BLOCK_ADDRESS ; armazena endereço de inicio do ultimo bloco

                                ; Armazena endereco de inicio do primeiro bloco
a070 8000		;	                                LD      DUMP_INI ; Carrega endereco inicial a ser lido
a072 900c		;	                                MM      DUMP_CURRENT_ADDR ; Salva em variavel temporaria

;                                 ; ------------- MAIN LOOP -------------------
                       ; Verifica se esta no ultimo bloco
a074 300c		;	DUMP_LOOP                       LV      DUMP_CURRENT_ADDR
d076 4002		;	                                +       SUBTRACT
a078 907c		;	                                MM      DUMP_SUBTRACT1
a07a 8014		;	                                LD      DUMP_LAST_BLOCK_ADDRESS
807c 0000		;	DUMP_SUBTRACT1                  K       /0000

a07e 1086		;	                                JZ      DUMP_LAST_BLOCK

                                ; se nao é ultimo bloco, DUMP_CURR_BLOCK_SIZE = DUMP_BL
a080 8006		;	                                LD      DUMP_BL
a082 9018		;	                                MM      DUMP_CURR_BLOCK_SIZE
a084 008a		;	                                JP      DUMP_BLOCK_CONTINUE ; continua programa

                                ; se ultimo bloco, corrige DUMP_CURR_BLOCK_SIZE para DUMP_LAST_BLOCK_SIZE
a086 8010		;	DUMP_LAST_BLOCK                 LD      DUMP_LAST_BLOCK_SIZE
a088 9018		;	                                MM      DUMP_CURR_BLOCK_SIZE

                                ; atualiza contador do loop principal
a08a 3018		;	DUMP_BLOCK_CONTINUE             LV      DUMP_CURR_BLOCK_SIZE
d08c 4002		;	                                +       SUBTRACT
a08e 9092		;	                                MM      DUMP_SUBTRACT2
a090 800e		;	                                LD      DUMP_COUNTER
8092 0000		;	DUMP_SUBTRACT2                  K       /0000 ; subtrai tamanho do bloco do counter
a094 20ea		;	                                JN      DUMPER_END_LOOP ; pula para o fim se atingiu o maximo numero de palavras (DUMP_TAM)

a096 900e		;	                                MM      DUMP_COUNTER ; se nao, atualiza counter

                                ; zera CHECKSUM
                                ; LD      CONST_0
                                ; MM      DUMP_CHECKSUM

                                ; INICIO DO BLOCO
                                ; ESCREVE ENDERECO INICIAL
a098 8028		;	                                LD      DUMP_PD_COMMAND
a09a 90a2		;	                                MM      DUMP_BLOCK_PD
a09c 300c		;	                                LV      DUMP_CURRENT_ADDR
a09e 91c8		;	                                MM      TARGET_ADDRESS
a0a0 a1ca		;	                                SC      LOAD_VALUE
80a2 0000		;	DUMP_BLOCK_PD                   K       /0000 ; Escreve no arquivo endereço atual

                                ; atualiza CHECKSUM para endereco
a0a4 800c		;	                                LD      DUMP_CURRENT_ADDR
a0a6 91b4		;	                                MM      CHECKSUM_CURRENT ; salva valor atual

                                ; ESCREVE TAMANHO DO BLOCO
a0a8 8028		;	                                LD      DUMP_PD_COMMAND
a0aa 90b2		;	                                MM      DUMP_BLOCK_PD1
a0ac 3018		;	                                LV      DUMP_CURR_BLOCK_SIZE
a0ae 91c8		;	                                MM      TARGET_ADDRESS
a0b0 a1ca		;	                                SC      LOAD_VALUE
80b2 0000		;	DUMP_BLOCK_PD1                  K       /0000 ; Escreve no arquivo tamanho do bloco atual

                                ; atualiza CHECKSUM para tamanho do bloco
a0b4 8018		;	                                LD      DUMP_CURR_BLOCK_SIZE
a0b6 91b6		;	                                MM      CHECKSUM_ADD ; salva valor atual
a0b8 a1b8		;	                                SC      UPDATE_CHECKSUM

                                ; ----****** BLOCK LOOP ******----
a0ba 8018		;	DUMP_BLOCK_LOOP                 LD      DUMP_CURR_BLOCK_SIZE ; carrega tamanho do bloco atual
d0bc 5009		;	                                -       CONST_1 ; subtrai 1
a0be 20e0		;	                                JN      DUMP_LOOP_UPDATE ; sai do loop do bloco
a0c0 9018		;	                                MM      DUMP_CURR_BLOCK_SIZE ; atualiza contador

a0c2 800c		;	                                LD      DUMP_CURRENT_ADDR ; carrega endereco atual
d0c4 5024		;	                                -       CONST_FFE ; subtrai endereco maximo disponivel
a0c6 10ea		;	                                JZ      DUMPER_END_LOOP ; pula para o fim se atingiu o maximo  endereço disponivel na memoria (FFE)

                                ; ESCRITA NO ARQUIVO
a0c8 8028		;	                                LD      DUMP_PD_COMMAND
a0ca 90d2		;	                                MM      DUMP_PD
a0cc 800c		;	                                LD      DUMP_CURRENT_ADDR ; carrega endereco atual
a0ce 91c8		;	                                MM      TARGET_ADDRESS ; armazena na variavel
a0d0 a1ca		;	                                SC      LOAD_VALUE ; chama subrotina que carrega conteudo
80d2 0000		;	DUMP_PD                         K       /0000 ; Escreve valor no arquivo

                                ; atualiza CHECKSUM
a0d4 91b6		;	                                MM      CHECKSUM_ADD ; salva valor atual
a0d6 a1b8		;	                                SC      UPDATE_CHECKSUM

                                ; atualiza proximo endereço
a0d8 800c		;	                                LD      DUMP_CURRENT_ADDR ; carrega valor do endereco
d0da 4010		;	                                +       CONST_2 ; soma 2
a0dc 900c		;	                                MM      DUMP_CURRENT_ADDR ; atualiza valor do endereco

a0de 00ba		;	                                JP      DUMP_BLOCK_LOOP

                                ; ----****** END BLOCK LOOP ******----

                                ; escreve CHECKSUM
a0e0 8028		;	DUMP_LOOP_UPDATE                LD      DUMP_PD_COMMAND
a0e2 90e6		;	                                MM      DUMP_PD1
a0e4 81b4		;	                                LD      CHECKSUM_CURRENT ; carrega checksum do bloco atual
80e6 0000		;	DUMP_PD1                        K       /0000 ; Escreve valor no arquivo


a0e8 0074		;	                                JP      DUMP_LOOP

                                ; ------------- END MAIN LOOP -------------------
a0ea 8028		;	DUMPER_END_LOOP                 LD      DUMP_PD_COMMAND
a0ec 90f0		;	                                MM      DUMP_PD2
a0ee 8008		;	                                LD      DUMP_EXE
80f0 0000		;	DUMP_PD2                        K       /0000 ; Escreve valor no arquivo

a0f2 b01a		;	DUMPER_END                      RS      DUMPER ; END da sub rotina
;
;
; ###################################
; LOADER
; ###################################
;
;
; Variaveis
;
80f4 0000		;	LOADER_CURRENT_ADDR               K       /0000
80f6 0000		;	LOADER_TOTAL_WORDS                K       /0000
80f8 0000		;	LOADER_BLOCK_SIZE                 K       /0000
80fa 0000		;	LOADER_CURRENT_VALUE              K       /0000
80fc 0000		;	LOADER_TEMP                       K       /0000
80fe 0000		;	LOADER_LAST_BLOCK_ADDRESS         K       /0000
8100 0000		;	LOADER_CHECKSUM                   K       /0000
8102 0000		;	LOADER_CURR_BLOCK_SIZE            K       /0000 ; funciona como counter de um bloco
; Rotina
;
8104 0000		;	LOADER                          K       /0000
                                ; comando GD
a106 800a		;	                                LD      LOADER_UL ; Carrega unidade logica
d108 4023		;	                                +       CONST_300 ; soma dispositivo tipo disco
d10a 4006		;	                                +       GETDATA ; Adiciona comando de escrita no arquivo
a10c 910e		;	                                MM      LOADER_GD_COMMAND ; Armazena comando PD

                                ; le endereço inicial
810e 0000		;	LOADER_GD_COMMAND               K       /0000 ; Le do arquivo endereço inicial
a110 90f4		;	                                MM      LOADER_CURRENT_ADDR ; Salva em variavel temporaria

                                ; le comprimento total da imagem do texto
a112 810e		;	                                LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a114 9116		;	                                MM      LOADER_SIZE_PD ; Salva em variavel temporaria
8116 0000		;	LOADER_SIZE_PD                  K       /0000 ; le comprimento total
a118 90f6		;	                                MM      LOADER_TOTAL_WORDS

                                ; END_INITCIAL+ 2 * #WORD < 1001
                                ; Verifica se a imagem cabe na memória, emitindo uma mensagem de erro (FFFE no acumulador) e parando se não for o caso.
a11a 30f6		;	                                LV      LOADER_TOTAL_WORDS
d11c 4005		;	                                +       MULTIPLY
a11e 9122		;	                                MM      LOADER_VERIFY_SIZE1
d120 8010		;	                                LD      CONST_2
8122 0000		;	LOADER_VERIFY_SIZE1             K       /0000 ; 2 x numero de palavras
a124 90fc		;	                                MM      LOADER_TEMP

a126 30fc		;	                                LV      LOADER_TEMP
d128 4003		;	                                +       SUM
a12a 912e		;	                                MM      LOADER_VERIFY_SIZE2
a12c 80f4		;	                                LD      LOADER_CURRENT_ADDR
812e 0000		;	LOADER_VERIFY_SIZE2             K       /0000 ; (2x num de palavras) + end inicial = A
a130 90fc		;	                                MM      LOADER_TEMP

a132 30fc		;	                                LV      LOADER_TEMP
d134 4002		;	                                +       SUBTRACT
a136 913a		;	                                MM      LOADER_VERIFY_SIZE3
d138 8026		;	                                LD      CONST_1001
813a 0000		;	LOADER_VERIFY_SIZE3             K       /0000 ; 1001 - A
                                ; se nao couber, termina programa
a13c 21a4		;	                                JN      LOADER_SIZE_ERROR


                                ;  ------------- MAIN LOOP -------------------

                                ; verifica se ja leu todas as palavas
a13e 80f6		;	LOADER_MAIN_LOOP                LD      LOADER_TOTAL_WORDS
a140 11ac		;	                                JZ      LOADER_END_SUCCESS

                                ; le proximo endereco do bloco
a142 810e		;	                                LD      LOADER_GD_COMMAND ; Carrega comando  de leitura
a144 9146		;	                                MM      LOADER_GET_ADRESS ; Salva em variavel temporaria
8146 0000		;	LOADER_GET_ADRESS               K       /0000 ; le endereço do arquivo
a148 90f4		;	                                MM      LOADER_CURRENT_ADDR ; armazena
a14a 91b4		;	                                MM      CHECKSUM_CURRENT ; armazena tamanho do bloco no checksum

                                ; le numero de words do bloco
a14c 810e		;	                                LD      LOADER_GD_COMMAND ; Carrega comando  de leitura
a14e 9150		;	                                MM      LOADER_GET_NUMBER ; Salva em variavel temporaria
8150 0000		;	LOADER_GET_NUMBER               K       /0000 ; le endereço do arquivo
a152 90f8		;	                                MM      LOADER_BLOCK_SIZE ; armazena
a154 91b6		;	                                MM      CHECKSUM_ADD

                                ; realiza checksum do bloco
a156 a1b8		;	                                SC      UPDATE_CHECKSUM ; soma endereco inicial do bloco e tamanho do bloco ao checksum

                                ; ----****** BLOCK LOOP ******----

                                ; verifica se ja terminou bloco atual
a158 80f8		;	LOADER_BLOCK_LOOP               LD      LOADER_BLOCK_SIZE
a15a 118c		;	                                JZ      END_BLOCK_LOOP

                                ; le valor atual
a15c 810e		;	                                LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a15e 9160		;	                                MM      LOADER_GET_NEXT_VALUE ; Salva em variavel temporaria
8160 0000		;	LOADER_GET_NEXT_VALUE           K       /0000 ; le VALOR
a162 90fa		;	                                MM      LOADER_CURRENT_VALUE ; armazena

a164 80f4		;	                                LD      LOADER_CURRENT_ADDR
d166 4001		;	                                +       WRITE
a168 916c		;	                                MM      LOADER_WRITE_VALUE
a16a 80fa		;	                                LD      LOADER_CURRENT_VALUE
816c 0000		;	LOADER_WRITE_VALUE              K       /0000 ; salva conteudo lido no endereço atual

                                ; ---- ATUALIZACOES -----

                                ; atualiza checksum
a16e 91b6		;	                                MM      CHECKSUM_ADD ; armazena
a170 a1b8		;	                                SC      UPDATE_CHECKSUM

                                ; atualiza endereco atual
a172 30f4		;	                                LV      LOADER_CURRENT_ADDR
d174 4003		;	                                +       SUM
a176 917a		;	                                MM      LOADER_UPDATE_CURR_ADDRESS
d178 8010		;	                                LD      CONST_2
817a 0000		;	LOADER_UPDATE_CURR_ADDRESS      K       /0000 ; soma 2 ao endereçø atual
a17c 90f4		;	                                MM      LOADER_CURRENT_ADDR

                                ; atualiza contador do bloco
a17e 80f8		;	                                LD      LOADER_BLOCK_SIZE
d180 5009		;	                                -       CONST_1
a182 90f8		;	                                MM      LOADER_BLOCK_SIZE

                                ; atualiza contador de palavras total
a184 80f6		;	                                LD      LOADER_TOTAL_WORDS
d186 5009		;	                                -       CONST_1
a188 90f6		;	                                MM      LOADER_TOTAL_WORDS

a18a 0158		;	                                JP      LOADER_BLOCK_LOOP

                                ; ----****** END BLOCK LOOP ******----

                                ; le checksum do arquivo
a18c 810e		;	END_BLOCK_LOOP                  LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a18e 9190		;	                                MM      LOADER_MAKE_CHECKSUM ; Salva em variavel temporaria
8190 0000		;	LOADER_MAKE_CHECKSUM            K       /0000 ; le VALOR
a192 90fc		;	                                MM      LOADER_TEMP

                                ; checa checksum do bloco
a194 30fc		;	                                LV      LOADER_TEMP
d196 4002		;	                                +       SUBTRACT
a198 919c		;	                                MM      LOADER_VERIFY_CHECKSUM
a19a 81b4		;	                                LD      CHECKSUM_CURRENT
819c 0000		;	LOADER_VERIFY_CHECKSUM          K       /0000

a19e 113e		;	                                JZ      LOADER_MAIN_LOOP ; retorna loop principal

a1a0 01a8		;	                                JP      LOADER_CHECKSUM_ERROR ; caso contrario, da erro de checksum
                                ;  ------------- MAIN LOOP -------------------
a1a2 01b2		;	                                JP      LOADER_END
                                ; tamanho da imagem maior do que espaço disponivel na memoria, carrega erro FFFE e termina
d1a4 8029		;	LOADER_SIZE_ERROR               LD      CONST_FFFE
a1a6 01b2		;	                                JP      LOADER_END
                                ; erro de checksum
d1a8 8028		;	LOADER_CHECKSUM_ERROR           LD      CONST_FFFC
a1aa 01b2		;	                                JP      LOADER_END
                                ; fim com sucesso
a1ac 810e		;	LOADER_END_SUCCESS              LD      LOADER_GD_COMMAND ; Carrega comando de leitura
a1ae 91b0		;	                                MM      LOADER_EXE ; Salva em variavel temporaria
81b0 0000		;	LOADER_EXE                      K       /0000 ; le VALOR da proxima instrucao executavel

a1b2 b104		;	LOADER_END                      RS      LOADER ; END da sub rotina
;
;
; ###################################
; UPDATE_CHECKSUM
; ###################################
;
; Sub rotina de DUMPER e LOADER que realiza a soma de CHECKSUM_ADD a CHECKSUM_CURRENT
;
81b4 0000		;	CHECKSUM_CURRENT                K       /0000
81b6 0000		;	CHECKSUM_ADD                    K       /0000
                                ; atualiza CHECKSUM
81b8 0000		;	UPDATE_CHECKSUM                 K       /0000
a1ba 31b4		;	                                LV      CHECKSUM_CURRENT
d1bc 4003		;	                                +       SUM
a1be 91c2		;	                                MM      CHECKUSUM_SUM
a1c0 81b6		;	                                LD      CHECKSUM_ADD
81c2 0000		;	CHECKUSUM_SUM                   K       /0000
a1c4 91b4		;	                                MM      CHECKSUM_CURRENT
a1c6 b1b8		;	                                RS      UPDATE_CHECKSUM
;
; ###################################
; LOAD_VALUE
; ###################################
;
; Subrotina para carregar um valor que esta no endereço TARGET_ADDRESS
;
; Variaveis
;
81c8 0000		;	TARGET_ADDRESS  K /0000 ; Endereço em que esta o valor desejado
;
; Rotina
;
81ca 0000		;	LOAD_VALUE      K /0000
a1cc 81c8		;	                LD TARGET_ADDRESS ; carrega o endereço
d1ce 4000		;	                + LOAD ; Soma load
a1d0 91d2		;	                MM EXEC_LOAD ; Armazena em EXEC_LOAD
81d2 0000		;	EXEC_LOAD       K /0000 ; Carrega valor do endereço
a1d4 b1ca		;	                RS LOAD_VALUE ; END da sub rotina
